import { Request, ResponseToolkit } from '@hapi/hapi'
import { inject, injectable } from 'inversify'
import { TYPES } from '../ioc/types'
import { Logger } from 'winston'
import { HapiRoute } from '../decorators/decorators'
import { HapiController } from './hapi-controller'
import * as Joi from '@hapi/joi'
import * as Boom from '@hapi/boom'
import { Mapper } from '../helpers/mapper'
import { IDriverController } from './interfaces/driver.interface'

import { DriverService } from '../service/driver.service'
import { DriverModel } from '../dto/driver'
import { Driver } from '../entity/driver'

/**
 * This file is automatically generated by swagger.  This is a stub.  It is expected that developers will fill in the logic
 * for each method - as generated each endpoint will return a 501 - not implemented.
 *
 * IT IS NOT SAFE TO OVERWRITE AN EXISTING FILE WITH THIS ONE.
 *
 * If there are changes to the swagger that describes routes implemented in this controller, the related interface will
 * change and the TypeScript compiler will complain that the controller does not implement the interface correctly.  In
 * this case, you can find the missing (added) method(s) in the generated controller and copy the stubs to your implementation.
 */
@injectable()
class DriverController extends HapiController implements IDriverController {

  constructor(
    @inject(TYPES.Logger) private logger: Logger,
    @inject(TYPES.DriverService) private service: DriverService,
    @inject(TYPES.Mapper) private mapper: Mapper)
  {
    super()
    this.logger.info('Created controller DriverController')
  }

// #region addDriver
/**
 * Add a new driver to the system
 */
  @HapiRoute({
    method: 'POST',
    path: 'drivers',
    options: {
      validate: { },
      description: 'Add a new driver to the system',
      tags: ['driver',],
      auth: false
    }
  })
  public async addDriver(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501)
  }
// #endregion

// #region findDrivers
/**
 * Finds all the drivers
 */
  @HapiRoute({
    method: 'GET',
    path: 'drivers',
    options: {
      validate: { },
      description: 'Finds Drivers',
      tags: ['driver',],
      auth: false
    }
  })
  public async findDrivers(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501)
  }
// #endregion

// #region getDriverById
/**
 * Returns a single driver
 */
  @HapiRoute({
    method: 'GET',
    path: 'drivers/{id}',
    options: {
      validate: { },
      description: 'Find driver by ID',
      tags: ['driver',],
      auth: false
    }
  })
  public async getDriverById(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501)
  }
// #endregion

// #region updateDriver
/**
 * Updates an existing driver by ID
 */
  @HapiRoute({
    method: 'PATCH',
    path: 'drivers/{id}',
    options: {
      validate: { },
      description: 'Updates an existing driver by ID',
      tags: ['driver',],
      auth: false
    }
  })
  public async updateDriver(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501)
  }
// #endregion

// #region deleteDriver
/**
 * Deletes a driver by ID
 */
  @HapiRoute({
    method: 'DELETE',
    path: 'drivers/{id}',
    options: {
      validate: { },
      description: 'Deletes a driver by ID',
      tags: ['driver',],
      auth: false
    }
  })
  public async deleteDriver(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501)
  }
// #endregion

// #region getDriverRaceResults
/**
 * Get driver's results on races
 */
  @HapiRoute({
    method: 'GET',
    path: 'drivers/{id}/results',
    options: {
      validate: { },
      description: 'Get driver\'s results on races',
      tags: ['driver','race-result',],
      auth: false
    }
  })
  public async getDriverRaceResults(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501)
  }
// #endregion

}

export { DriverController }
