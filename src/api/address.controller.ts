import { Request, ResponseToolkit } from '@hapi/hapi'
import { inject, injectable } from 'inversify'
import { TYPES } from '../ioc/types'
import { Logger } from 'winston'
import { HapiRoute } from '../decorators/decorators'
import { HapiController } from './hapi-controller'
import * as Joi from '@hapi/joi'
import * as Boom from '@hapi/boom'
import { Mapper } from '../helpers/mapper'
import { IAddressController } from './interfaces/address.interface'

import { AddressService } from '../service/address.service'
import { AddressModel } from '../dto/address'
import { Address } from '../entity/address'

/**
 * This file is automatically generated by swagger.  This is a stub.  It is expected that developers will fill in the logic
 * for each method - as generated each endpoint will return a 501 - not implemented.
 *
 * IT IS NOT SAFE TO OVERWRITE AN EXISTING FILE WITH THIS ONE.
 *
 * If there are changes to the swagger that describes routes implemented in this controller, the related interface will
 * change and the TypeScript compiler will complain that the controller does not implement the interface correctly.  In
 * this case, you can find the missing (added) method(s) in the generated controller and copy the stubs to your implementation.
 */
@injectable()
class AddressController extends HapiController implements IAddressController {

  /**
   * Here we are also injecting the car service to manage interactions with the database
   * in addition to the logger and mapper.  You can inject as many dependencies as you need.
   *
   * This is a test.
   */
  constructor(
    @inject(TYPES.Logger) private logger: Logger,
    @inject(TYPES.AddressService) private service: AddressService,
    @inject(TYPES.Mapper) private mapper: Mapper)
  {
    super()
    this.logger.info('Created controller AddressController')
  }

// #region addAddress
/**
 * Add a new address to the system
 */
  @HapiRoute({
    method: 'POST',
    path: 'addresses',
    options: {
      validate: {
        payload: {
          name: Joi.string().required(),
          street: Joi.string().allow(null, ''),
          street2: Joi.string().allow(null, ''),
          city: Joi.string().required(),
          state: Joi.string().required(),
          zip: Joi.string().required(),
          country: Joi.string().required()
        }
      },
      description: 'Add a new address to the system',
      tags: ['address'],
      auth: false
    }
  })
  public async addAddress(request: Request, toolkit: ResponseToolkit) {
    const payload: Address = this.mapper.map(AddressModel, Address, request.payload)
    const item = await this.service.save(payload)
    return toolkit.response({id: item!.id}).code(201)
  }
// #endregion

// #region findAddresses
/**
 * Finds all the addresses
 */
  @HapiRoute({
    method: 'GET',
    path: 'addresses',
    options: {
      validate: { },
      description: 'Finds Addresses',
      tags: ['address'],
      auth: false
    }
  })
  public async findAddresses(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response(await this.service.findAll())
  }
// #endregion

// #region getAddressById
/**
 * Returns a single address
 */
  @HapiRoute({
    method: 'GET',
    path: 'addresses/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        }
      },
      description: 'Find an address by ID',
      tags: ['address'],
      auth: false
    }
  })
  public async getAddressById(request: Request, toolkit: ResponseToolkit) {
    const item = await this.service.findById(request.params.id)
    if (!item) {
      throw Boom.notFound()
    }
    return toolkit.response(item)
  }
// #endregion

// #region updateAddress
/**
 * Updates an existing address by ID
 */
  @HapiRoute({
    method: 'PATCH',
    path: 'addresses/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        },
        payload: {
          name: Joi.string(),
          street: Joi.string().allow(null, ''),
          street2: Joi.string().allow(null, ''),
          city: Joi.string(),
          state: Joi.string(),
          zip: Joi.string(),
          country: Joi.string()
        }
      },
      description: 'Updates an existing address by ID',
      tags: ['address'],
      auth: false
    }
  })
  public async updateAddress(request: Request, toolkit: ResponseToolkit) {
    const payload: Address = this.mapper.map(AddressModel, Address, Object.assign({}, request.payload, request.params))

    const item = await this.service.findById(payload.id)
    if (!item) {
      throw Boom.notFound()
    }
    await this.service.save(payload)
    return toolkit.response().code(204)
  }
// #endregion

// #region deleteAddress
/**
 * Delete an address by ID
 */
  @HapiRoute({
    method: 'DELETE',
    path: 'addresses/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        }
      },
      // pre: [
      //   { method: async (request: Request, toolkit: ResponseToolkit) => {
      //     const item = await this.addressesService.findById(request.params.id)
      //     if (!item) {
      //       return Boom.notFound()
      //     }
      //     return item
      //   }, assign: 'detail' }
      // ],
      description: 'Delete an address by ID',
      tags: ['address'],
      auth: false
    }
  })
  public async deleteAddress(request: Request, toolkit: ResponseToolkit) {
    const result = await this.service.delete(request.params.id)
    if (!result.affected) {
      throw Boom.notFound()
    }
    return toolkit.response().code(204)
  }
// #endregion

}

export { AddressController }
