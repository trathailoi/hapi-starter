import { Request, ResponseToolkit } from "@hapi/hapi";
import { inject, injectable } from "inversify";
import { TYPES } from "../ioc/types";
import { Logger } from "winston";
import { HapiRoute } from "../decorators/decorators";
import { HapiController } from "./hapi-controller";
import * as Joi from '@hapi/joi';
import * as Boom from "@hapi/boom";
import { Mapper } from "../helpers/mapper";
import { IRaceResultController } from './interfaces/race-result.interface';

import { RaceResultService } from '../service/race-result.service';
// import { RaceResultModel } from '../dto/race-result';
// import { RaceResult } from '../entity/race-result';

/**
 * This file is automatically generated by swagger.  This is a stub.  It is expected that developers will fill in the logic
 * for each method - as generated each endpoint will return a 501 - not implemented.
 *
 * IT IS NOT SAFE TO OVERWRITE AN EXISTING FILE WITH THIS ONE.
 *
 * If there are changes to the swagger that describes routes implemented in this controller, the related interface will
 * change and the TypeScript compiler will complain that the controller does not implement the interface correctly.  In
 * this case, you can find the missing (added) method(s) in the generated controller and copy the stubs to your implementation.
 */
@injectable()
class RaceResultController extends HapiController implements IRaceResultController {

  /**
   * Here we are also injecting the car service to manage interactions with the database
   * in addition to the logger and mapper.  You can inject as many dependencies as you need.
   *
   * This is a test.
   */
  constructor(
      @inject(TYPES.Logger) private logger: Logger,
      @inject(TYPES.RaceResultService) private raceResultService: RaceResultService,
      @inject(TYPES.Mapper) private mapper: Mapper)
  {
      super();
      this.logger.info('Created controller RaceResultController');
  }

/**
 * Get a result detail by ID
 */
  @HapiRoute({
    method: 'GET',
    path: 'race-results/{id}',
    options: {
      validate: { },
      description: 'Get a result detail by ID',
      tags: ['race-result',],
      auth: false
    }
  })
  public async getRaceResultById(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501);
  }

/**
 * Delete a race result by ID
 */
  @HapiRoute({
    method: 'DELETE',
    path: 'race-results/{id}',
    options: {
      validate: { },
      description: 'Delete a race result by ID',
      tags: ['race-result',],
      auth: false
    }
  })
  public async deleteRaceResult(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response().code(501);
  }

}

export { RaceResultController }
