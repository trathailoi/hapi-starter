import { Request, ResponseToolkit } from '@hapi/hapi'
import { inject, injectable } from 'inversify'
import { TYPES } from '../ioc/types'
import { Logger } from 'winston'
import { HapiRoute } from '../decorators/decorators'
import { HapiController } from './hapi-controller'
import * as Joi from '@hapi/joi'
import * as Boom from '@hapi/boom'
import { Mapper } from '../helpers/mapper'
import { ICarController } from './interfaces/car.interface'

import { CarService } from '../service/car.service'
import { CarModel } from '../dto/car'
import { Car } from '../entity/car'

import { RaceResultService } from '../service/race-result.service'
import { RaceResultModel } from '../dto/race-result'
import { RaceResult } from '../entity/race-result'

/**
 * This file is automatically generated by swagger.  This is a stub.  It is expected that developers will fill in the logic
 * for each method - as generated each endpoint will return a 501 - not implemented.
 *
 * IT IS NOT SAFE TO OVERWRITE AN EXISTING FILE WITH THIS ONE.
 *
 * If there are changes to the swagger that describes routes implemented in this controller, the related interface will
 * change and the TypeScript compiler will complain that the controller does not implement the interface correctly.  In
 * this case, you can find the missing (added) method(s) in the generated controller and copy the stubs to your implementation.
 */
@injectable()
class CarController extends HapiController implements ICarController {

  constructor(
    @inject(TYPES.Logger) private logger: Logger,
    @inject(TYPES.CarService) private service: CarService,
    @inject(TYPES.RaceResultService) private raceResultService: RaceResultService,
    @inject(TYPES.Mapper) private mapper: Mapper)
  {
    super()
    this.logger.info('Created controller CarController')
  }

// #region addCar
/**
 * Add a new car to the system
 */
  @HapiRoute({
    method: 'POST',
    path: 'cars',
    options: {
      validate: {
        payload: {
          name: Joi.string().required(),
          make: Joi.string().required(),
          model: Joi.string().required(),
          class: Joi.string().guid().required(),
          team: Joi.string().guid().required(),
          results: Joi.array().items(Joi.string().guid())
        }
      },
      description: 'Add a new car to the system',
      tags: ['car'],
      auth: false
    }
  })
  public async addCar(request: Request, toolkit: ResponseToolkit) {
    const payload: Car = this.mapper.map(CarModel, Car, request.payload)
    const item = await this.service.save(payload)
    return toolkit.response({id: item!.id}).code(201)
  }
// #endregion

// #region findCars
/**
 * Finds all the cars
 */
  @HapiRoute({
    method: 'GET',
    path: 'cars',
    options: {
      validate: {
        query: {
          currentPage: Joi.number().integer().min(1).optional().description('offset for pagination'),
          pageSize: Joi.number().integer().min(1).optional().description('items per page'),
          make: Joi.string().description('The make of the car'),
          model: Joi.string().description('The model of the car'),
        }
      },
      description: 'Finds Cars',
      tags: ['car'],
      auth: false
    }
  })
  public async findCars(request: Request, toolkit: ResponseToolkit) {
    const queryObj: {
      pagination?: {pageSize?: number, currentPage?: number},
      where?: {make?: string, model?: string}
    } = {
      pagination: {
        pageSize: request.query.pageSize,
        currentPage: request.query.currentPage
      }
    }
    if (request.query.make || request.query.model) {
      queryObj.where = {}
      request.query.make && (queryObj.where.make = request.query.make)
      request.query.model && (queryObj.where.model = request.query.model)
    }
    return toolkit.response(await this.service.findAll(queryObj))
  }
// #endregion

// #region getCarById
/**
 * Returns a single car
 */
  @HapiRoute({
    method: 'GET',
    path: 'cars/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        }
      },
      description: 'Find car by ID',
      tags: ['car'],
      auth: false
    }
  })
  public async getCarById(request: Request, toolkit: ResponseToolkit) {
    const item = await this.service.findById(request.params.id)
    if (!item) {
      throw Boom.notFound()
    }
    return toolkit.response(item)
  }
// #endregion

// #region updateCar
/**
 * Updates an existing car by ID
 */
  @HapiRoute({
    method: 'PATCH',
    path: 'cars/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        },
        payload: {
          name: Joi.string(),
          make: Joi.string(),
          model: Joi.string(),
          class: Joi.string().guid(),
          team: Joi.string().guid(),
          results: Joi.array().items(Joi.string().guid())
        }
      },
      description: 'Updates an existing car by ID',
      tags: ['car'],
      auth: false
    }
  })
  public async updateCar(request: Request, toolkit: ResponseToolkit) {
    const payload: Car = this.mapper.map(CarModel, Car, Object.assign({}, request.payload, request.params))

    const item = await this.service.findById(payload.id)
    if (!item) {
      throw Boom.notFound()
    }
    await this.service.save(payload)
    return toolkit.response().code(204)
  }
// #endregion

// #region deleteCar
/**
 * Deletes a car by ID
 */
  @HapiRoute({
    method: 'DELETE',
    path: 'cars/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        }
      },
      description: 'Deletes a car by ID',
      tags: ['car'],
      auth: false
    }
  })
  public async deleteCar(request: Request, toolkit: ResponseToolkit) {
    const result = await this.service.delete(request.params.id)
    if (!result.affected) {
      throw Boom.notFound()
    }
    return toolkit.response().code(204)
  }
// #endregion

// #region getCarResults
/**
 * Get a car's results
 */
  @HapiRoute({
    method: 'GET',
    path: 'cars/{id}/results',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        },
        query: {
          currentPage: Joi.number().integer().min(1).optional().description('offset for pagination'),
          pageSize: Joi.number().integer().min(1).optional().description('items per page'),
          raceId: Joi.string().guid().description('of a specific race'),
          driverId: Joi.string().guid().description('of a specific driver')
        }
      },
      description: 'Get a car\'s results',
      tags: ['car','race-result'],
      auth: false
    }
  })
  public async getCarResults(request: Request, toolkit: ResponseToolkit) {
    const queryObj: {
      pagination?: {pageSize?: number, currentPage?: number},
      where: {car: string, race?: string, driver?: string}
    } = {
      pagination: {
        pageSize: request.query.pageSize,
        currentPage: request.query.currentPage
      },
      where: {
        car: request.params.id
      }
    }
    if (request.query.raceId || request.query.driverId) {
      request.query.raceId && (queryObj.where.race = request.query.raceId)
      request.query.driverId && (queryObj.where.driver = request.query.driverId)
    }
    return toolkit.response(await this.raceResultService.findAll(queryObj))
  }
// #endregion

}

export { CarController }
