import { Request, ResponseToolkit } from '@hapi/hapi'
import { inject, injectable } from 'inversify'
import { TYPES } from '../ioc/types'
import { Logger } from 'winston'
import { HapiRoute } from '../decorators/decorators'
import { HapiController } from './hapi-controller'
import * as Joi from '@hapi/joi'
import * as Boom from '@hapi/boom'
import { Mapper } from '../helpers/mapper'
import { ITeamController } from './interfaces/team.interface'

import { TeamService } from '../service/team.service'
import { TeamModel } from '../dto/team'
import { Team } from '../entity/team'

/**
 * This file is automatically generated by swagger.  This is a stub.  It is expected that developers will fill in the logic
 * for each method - as generated each endpoint will return a 501 - not implemented.
 *
 * IT IS NOT SAFE TO OVERWRITE AN EXISTING FILE WITH THIS ONE.
 *
 * If there are changes to the swagger that describes routes implemented in this controller, the related interface will
 * change and the TypeScript compiler will complain that the controller does not implement the interface correctly.  In
 * this case, you can find the missing (added) method(s) in the generated controller and copy the stubs to your implementation.
 */
@injectable()
class TeamController extends HapiController implements ITeamController {

  constructor(
    @inject(TYPES.Logger) private logger: Logger,
    @inject(TYPES.TeamService) private service: TeamService,
    @inject(TYPES.Mapper) private mapper: Mapper)
  {
    super()
    this.logger.info('Created controller TeamController')
  }

// #region addTeam
/**
 * Add a new team to the system
 */
  @HapiRoute({
    method: 'POST',
    path: 'teams',
    options: {
      validate: {
        payload: {
          name: Joi.string().required(),
          nationality: Joi.string().valid('USA', 'Viet Nam'),
          businessAddress: Joi.string().guid()
        }
      },
      description: 'Add a new team to the system',
      tags: ['team'],
      auth: false
    }
  })
  public async addTeam(request: Request, toolkit: ResponseToolkit) {
    console.log('request.payload', request.payload)
    const payload: Team = this.mapper.map(TeamModel, Team, request.payload)
    const team = await this.service.save(payload)
    return toolkit.response({id: team!.id}).code(201)
  }
// #endregion

// #region findTeams
/**
 * Finds all the teams
 */
  @HapiRoute({
    method: 'GET',
    path: 'teams',
    options: {
      validate: {
        query: {
          currentPage: Joi.number().integer().min(1).optional().description('offset for pagination'),
          pageSize: Joi.number().integer().min(1).optional().description('items per page')
        }
      },
      description: 'Finds Teams',
      tags: ['team'],
      auth: false
    }
  })
  public async findTeams(request: Request, toolkit: ResponseToolkit) {
    return toolkit.response(await this.service.findAll({
      pagination: {
        pageSize: request.query.pageSize,
        currentPage: request.query.currentPage
      }
    }))
  }
// #endregion

// #region getTeamById
/**
 * Returns a single team
 */
  @HapiRoute({
    method: 'GET',
    path: 'teams/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        }
      },
      description: 'Find team by ID',
      tags: ['team'],
      auth: false
    }
  })
  public async getTeamById(request: Request, toolkit: ResponseToolkit) {
    const item = await this.service.findById(request.params.id)
    if (!item) {
      throw Boom.notFound()
    }
    return toolkit.response(item)
  }
// #endregion

// #region updateTeam
/**
 * Updates an existing team by ID
 */
  @HapiRoute({
    method: 'PATCH',
    path: 'teams/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        },
        payload: {
          name: Joi.string(),
          nationality: Joi.string().valid('USA', 'Viet Nam'),
          businessAddress: Joi.string().guid()
        }
      },
      description: 'Updates an existing team by ID',
      tags: ['team'],
      auth: false
    }
  })
  public async updateTeam(request: Request, toolkit: ResponseToolkit) {
    const payload: Team = this.mapper.map(TeamModel, Team, Object.assign({}, request.payload, request.params))

    const item = await this.service.findById(payload.id)
    if (!item) {
      throw Boom.notFound()
    }
    await this.service.save(payload)
    return toolkit.response().code(204)
  }
// #endregion

// #region deleteTeam
/**
 * Deletes a team by ID
 */
  @HapiRoute({
    method: 'DELETE',
    path: 'teams/{id}',
    options: {
      validate: {
        params: {
          id: Joi.string().guid().required()
        }
      },
      description: 'Deletes a team by ID',
      tags: ['team'],
      auth: false
    }
  })
  public async deleteTeam(request: Request, toolkit: ResponseToolkit) {
    const result = await this.service.delete(request.params.id)
    if (!result.affected) {
      throw Boom.notFound()
    }
    return toolkit.response().code(204)
  }
// #endregion

}

export { TeamController }
