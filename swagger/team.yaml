openapi: 3.0.0
info:
  description: |
    A more complex version of the race cars API.
  version: "1.0.0"
  title: Teams Management
  contact:
    email: loi.tra@9thwonder.com
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/loi.tra/my-first-API/1.0.0
  - description: Please run the app locally on port 8080
    url: 'http://localhost:8080/api'
tags:
  - name: team
    description: Teams

paths:
  /teams:
    post:
      tags:
        - team
      summary: Add a new team to the system
      operationId: addTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamFormData'
        description: form data object that contains fields to update a specific team in the system
      responses:
        default:
          description: successful operation
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'
    get:
      tags:
        - team
      summary: Finds Teams
      description: Finds all the teams
      operationId: findTeams
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
  '/teams/{teamId}':
    get:
      tags:
        - team
      summary: Find team by ID
      description: Returns a single team
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          description: ID of team to return
          required: true
          schema:
            $ref: './common.yaml#/components/schemas/uuidFormat'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: './common.yaml#/components/responses/404NotFound'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'
    patch:
      tags:
        - team
      summary: Updates an existing team by ID
      operationId: updateTeam
      parameters:
        - name: teamId
          in: path
          description: ID of the team that needs to be updated
          required: true
          schema:
            $ref: './common.yaml#/components/schemas/uuidFormat'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamFormData'
        description: form data object that contains fields to update a specific team in the system
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: './common.yaml#/components/responses/404NotFound'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'
    delete:
      tags:
        - team
      summary: Deletes a team by ID
      operationId: deleteTeam
      parameters:
        - name: teamId
          in: path
          description: Team id to delete
          required: true
          schema:
            $ref: './common.yaml#/components/schemas/uuidFormat'
      responses:
        '200':
          $ref: './common.yaml#/components/responses/200Success'
        '404':
          $ref: './common.yaml#/components/responses/404NotFound'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'

components:
  schemas:
    TeamFormData: # Can be referenced as '#/components/schemas/TeamFormData'
      type: object
      required:
        - name
        - nationality
      properties:
        name:
          type: string
          example: The Quicksilver
        nationality:
          type: string
          enum: [USA, VietNam]
          example: USA
        businessAddress:
          $ref: './common.yaml#/components/schemas/uuidFormat'
    Team: # Can be referenced as '#/components/schemas/Team'
      allOf:
        - type: object
          properties:
            id:
              $ref: './common.yaml#/components/schemas/uuidFormat'
        - $ref: '#/components/schemas/TeamFormData'

