openapi: 3.0.0
info:
  description: |
    A more complex version of the race cars API.
  version: "1.0.0"
  title: Drivers Management
  contact:
    email: loi.tra@9thwonder.com
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/loi.tra/my-first-API/1.0.0
  - description: Please run the app locally on port 8080
    url: 'http://localhost:8080/api'
tags:
  - name: driver
    description: Drivers

paths:
  /drivers:
    post:
      tags:
        - driver
      summary: Add a new driver to the system
      operationId: addDriver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverFormData'
        description: form data object that contains fields to update a specific driver in the system
      responses:
        default:
          description: successful operation
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverResponse'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'
    get:
      tags:
        - driver
      summary: Finds Drivers
      description: Finds all the drivers
      operationId: findDrivers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverResponse'
  '/drivers/{driverId}':
    get:
      tags:
        - driver
      summary: Find driver by ID
      description: Returns a single driver
      operationId: getDriverById
      parameters:
        - name: driverId
          in: path
          description: ID of driver to return
          required: true
          schema:
            $ref: './common.yaml#/components/schemas/uuidFormat'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverResponse'
        '404':
          $ref: './common.yaml#/components/responses/404NotFound'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'
    patch:
      tags:
        - driver
      summary: Updates an existing driver by ID
      operationId: updateDriver
      parameters:
        - name: driverId
          in: path
          description: ID of the driver that needs to be updated
          required: true
          schema:
            $ref: './common.yaml#/components/schemas/uuidFormat'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriverFormData'
        description: form data object that contains fields to update a specific driver in the system
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverResponse'
        '404':
          $ref: './common.yaml#/components/responses/404NotFound'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'
    delete:
      tags:
        - driver
      summary: Deletes a driver by ID
      operationId: deleteDriver
      parameters:
        - name: driverId
          in: path
          description: Driver id to delete
          required: true
          schema:
            $ref: './common.yaml#/components/schemas/uuidFormat'
      responses:
        '200':
          $ref: './common.yaml#/components/responses/200Success'
        '404':
          $ref: './common.yaml#/components/responses/404NotFound'
        '400':
          $ref: './common.yaml#/components/responses/400BadRequest'

components:
  schemas:
    DriverFormData: # Can be referenced as '#/components/schemas/DriverFormData'
      type: object
      required:
        - firstName
        - lastName
        - nationality
        - team
      properties:
        firstName:
          type: string
          example: Barry
        lastName:
          type: string
          example: Allen
        nationality:
          type: string
          enum: [USA, VietNam]
          example: USA
        team:
          $ref: './common.yaml#/components/schemas/uuidFormat'
        homeAddress:
          $ref: './common.yaml#/components/schemas/uuidFormat'
        managementAddress:
          $ref: './common.yaml#/components/schemas/uuidFormat'
    Driver: # Can be referenced as '#/components/schemas/Driver'
      allOf:
        - type: object
          properties:
            id:
              $ref: './common.yaml#/components/schemas/uuidFormat'
        - $ref: '#/components/schemas/DriverFormData'
    DriverResponse: # Can be referenced as '#/components/schemas/DriverResponse'
      type: object
      properties:
        id:
          $ref: './common.yaml#/components/schemas/uuidFormat'
        firstName:
          type: string
          example: Barry
        lastName:
          type: string
          example: Allen
        nationality:
          type: string
          enum: [USA, VietNam]
          example: USA
        team:
          $ref: './team.yaml#/components/schemas/TeamResponse'
        homeAddress:
          $ref: './address.yaml#/components/schemas/Address'
        managementAddress:
          $ref: './address.yaml#/components/schemas/Address'
