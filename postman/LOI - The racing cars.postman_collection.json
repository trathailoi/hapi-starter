{
	"info": {
		"_postman_id": "76b0916a-1aa9-4f4c-9fba-18d79aff453d",
		"name": "LOI - The racing cars",
		"description": "Contact Support:\n Email: loi.tra@9thwonder.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Class",
			"item": [
				{
					"name": "[POST] /classes - Create new class",
					"item": [
						{
							"name": "#NEGATIVE - Create class- long name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Create class - long name', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"value too long for type character varying(50)\");",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Create class- invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Create class - invalid name', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" must be a string\");",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": 123\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Create class- empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Create class - empty \"name\"', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Create class- missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Create class - missing \"name\"', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is required\");",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Create class- invalid request payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Create class - Invalid request payload JSON format', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid request payload JSON format\");",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": zxc\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#POSITIVE - Create class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
											"    pm.collectionVariables.set(\"class1Id\", pm.response.json().id);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1Name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#CLEANUP - Delete a class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Class')",
											"pm.collectionVariables.unset(\"class1Id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "[GET] /classes/{classId} - Find class by ID",
					"item": [
						{
							"name": "#SEEDING - Create class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
											"    pm.collectionVariables.set(\"class1Id\", pm.response.json().id);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1Name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Find class by an invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Find class by an invalid ID', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"id\\\" must be a valid GUID\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "123456-123123",
											"description": "(Required) ID of class to return"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK. Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"name\": \"LM GTE AM\"\n}"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Find class by an non-exist ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNotFound('Find class by a non-exist ID')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
											"description": "(Required) ID of class to return"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK. Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"name\": \"LM GTE AM\"\n}"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#POSITIVE - Find class by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Class - Read detail API: Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Class - Read detail API: check class info\",()=>{      ",
											"    pm.expect(jsonData).to.be.not.empty;    ",
											"    pm.expect(jsonData.id).to.be.equal(pm.collectionVariables.get(\"class1Id\"));  ",
											"    pm.expect(jsonData.name).to.be.equal(pm.collectionVariables.get(\"class1Name\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) ID of class to return"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK. Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"name\": \"LM GTE AM\"\n}"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of class to return"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#CLEANUP - Delete a class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Class')",
											"pm.collectionVariables.unset(\"class1Id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "[GET] /classes - Find classes",
					"item": [
						{
							"name": "#SEEDING - Create class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
											"    pm.collectionVariables.set(\"class1Id\", pm.response.json().id);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1Name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "Get all class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Class - Read list API (after create): Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Class - Read list API (after create): check list not empty & class info\",()=>{    ",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData.count).to.be.a(\"number\");",
											"    const classCheck = jsonData.data.filter(check => check.id === pm.collectionVariables.get(\"class1Id\"));",
											"    pm.expect(classCheck).to.be.not.empty;    ",
											"    pm.expect(classCheck[0].name).to.be.equal(pm.collectionVariables.get(\"class1Name\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "OK. Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n  \"name\": \"LM GTE AM\"\n },\n {\n  \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n  \"name\": \"LM GTE AM\"\n }\n]"
								}
							]
						},
						{
							"name": "#CLEANUP - Delete a class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Class')",
											"pm.collectionVariables.unset(\"class1Id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "[PATCH] /classes/{classId} - Update class by ID",
					"item": [
						{
							"name": "#SEEDING - Create class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
											"    pm.collectionVariables.set(\"class1Id\", pm.response.json().id);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1Name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#POSITIVE - Update an existing class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Class - Update detail API: Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1updateName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Update class - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Update class by an invalid ID', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"id\\\" must be a valid GUID\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1updateName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "an-invalid-id-here",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Update class - non-exist ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNotFound('Update class by a non-exist ID')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1updateName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Update class - long name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Update class with a long name', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"value too long for type character varying(50)\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-a-very-long-name-\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Update class - invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Update class - invalid name', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" must be a string\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": 123\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Update class - empty \"name\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Update class with an empty \"name\"', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Update class - missing \"name\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Update class - missing \"name\"', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is required\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Update class - invalid request payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Update class - Invalid request payload JSON format', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid request payload JSON format\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": zxc\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id need to be updated"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id need to be updated"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#CLEANUP - Delete a class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Class')",
											"pm.collectionVariables.unset(\"class1Id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "[DELETE] /classes/{classId} - Delete a class by ID",
					"item": [
						{
							"name": "#SEEDING - Create class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
											"    pm.collectionVariables.set(\"class1Id\", pm.response.json().id);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{class1Name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": [
								{
									"name": "Created. Successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Delete a class - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNegative('Delete class by an invalid ID', (jsonData) => {",
											"    pm.expect(jsonData.message).to.eql(\"\\\"id\\\" must be a valid GUID\");",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "123-456",
											"description": "(Required) Class id to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#NEGATIVE - Delete a class - non-exist ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertNotFound('Delete class by a non-exist ID')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
											"description": "(Required) Class id to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						},
						{
							"name": "#POSITIVE - Delete a class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Class')",
											"pm.collectionVariables.unset(\"class1Id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}",
											"description": "(Required) Class id to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "No Content. Successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request. Invalid input",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
								},
								{
									"name": "Not Found. URL or item not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) Class id to delete"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Address",
			"item": [
				{
					"name": "[POST] /addresses - Create new address",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Create address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
													"    pm.collectionVariables.set(\"address1Id\", pm.response.json().id);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"street\": \"{{street1Name1}}\",\n    \"street2\": \"{{street1Name2}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "Created. Successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								}
							],
							"description": "happy cases"
						},
						{
							"name": "#NEGATIVE - Missing required fields",
							"item": [
								{
									"name": "Address - Create (invalid 5: name is missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - missing \"name\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is required\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zipcode\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								},
								{
									"name": "Address - Create (invalid 5: city is missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - missing \"city\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"city\\\" is required\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								},
								{
									"name": "Address - Create (invalid 5: state is missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - missing \"state\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"state\\\" is required\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 5: zipcode is missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - missing \"zip\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"zip\\\" is required\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 5: country is missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - missing \"country\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"country\\\" is required\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"{{zipcode1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Address - Create (invalid 3: extra field)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - extra field \"test\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"test\\\" is not allowed\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"street\": \"{{street1Name1}}\",\r\n    \"street2\": \"{{street1Name2}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\",\r\n    \"test\": \"something\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types (including empty)",
							"item": [
								{
									"name": "Address - Create (invalid 1: name is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - empty \"city\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"city\\\" is not allowed to be empty\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"street\": \"{{street1Name1}}\",\r\n    \"street2\": \"{{street1Name2}}\",\r\n    \"city\": \"\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 1: city is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - empty \"name\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"street\": \"{{street1Name1}}\",\r\n    \"street2\": \"{{street1Name2}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 1: state is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - empty \"state\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"state\\\" is not allowed to be empty\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"street\": \"{{street1Name1}}\",\r\n    \"street2\": \"{{street1Name2}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 1: zipcode is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - empty \"zip\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"zip\\\" is not allowed to be empty\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"street\": \"{{street1Name1}}\",\r\n    \"street2\": \"{{street1Name2}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 1: country is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - empty \"country\"', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"country\\\" is not allowed to be empty\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"street\": \"{{street1Name1}}\",\r\n    \"street2\": \"{{street1Name2}}\",\r\n    \"city\": \"{{city1}}\",\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 2: json is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - empty request body', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"value\\\" must be of type object\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Address - Create (invalid 4: value has wrong format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Create address - invalid request payload JSON format', (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Invalid request payload JSON format\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{addressName1}}\",\r\n    \"street\": \"{{street1Name1}}\",\r\n    \"street2\": \"{{street1Name2}}\",\r\n    \"city\": {{city1}},\r\n    \"state\": \"{{state1}}\",\r\n    \"zip\": \"{{zipcode1}}\",\r\n    \"country\": \"{{country1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#INTEGRATION",
							"item": [
								{
									"name": "#POSITIVE 1",
									"item": [
										{
											"name": "Add a new address successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(globals.loadUtils).assertCreatePositive('Create Class', () => {",
															"    pm.collectionVariables.set(\"address2Id\", pm.response.json().id);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"street\": \"{{street1Name1}}\",\n    \"street2\": \"{{street1Name2}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"response": [
												{
													"name": "Created. Successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses"
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
												},
												{
													"name": "Bad Request. Invalid input",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
												}
											]
										},
										{
											"name": "Assert the address is added",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Address - Read detail API: Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Address - Read detail API: Should return exact format\", () => {",
															"    pm.response.to.have.jsonSchema({",
															"        type: \"object\",",
															"        properties: {",
															"            id: { type: \"string\" },",
															"            street: { type: [\"string\", \"null\"] },",
															"            street2: { type: [\"string\", \"null\"] },",
															"            city: { type: \"string\" },",
															"            state: { type: \"string\" },",
															"            zipcode: { type: \"string\" },",
															"            country: { type: \"string\" }",
															"        }",
															"    });",
															"});",
															"",
															"// const jsonData = pm.response.json();",
															"",
															"// // pm.test(\"Address - Read detail API: check Address info\",()=>{",
															"// //     pm.expect(jsonData).to.be.not.empty;    ",
															"// //     pm.expect(jsonData.id).to.be.equal(pm.collectionVariables.get(\"address1Id\"));  ",
															"// //     pm.expect(jsonData.street).to.be.equal(pm.collectionVariables.get(\"street1Name1\"));",
															"// //     pm.expect(jsonData.street2).to.be.equal(pm.collectionVariables.get(\"street1Name2\"));",
															"// //     pm.expect(jsonData.city).to.be.equal(pm.collectionVariables.get(\"city1\"));",
															"// //     pm.expect(jsonData.state).to.be.equal(pm.collectionVariables.get(\"state1\"));",
															"// //     pm.expect(jsonData.zipcode).to.be.equal(pm.collectionVariables.get(\"zipcode1\"));",
															"// //     pm.expect(jsonData.country).to.be.equal(pm.collectionVariables.get(\"country1\"));",
															"// // })"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "{{address2Id}}",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"response": [
												{
													"name": "OK. Successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) ID of address to return"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"city\": \"Houston\",\n \"country\": \"United States\",\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"state\": \"Texas\",\n \"zipcode\": \"77002\",\n \"street\": \"1797 Colonial Drive\",\n \"street2\": \"411 Patterson Street\"\n}"
												},
												{
													"name": "Bad Request. Invalid input",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) ID of address to return"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
												},
												{
													"name": "Not Found. URL or item not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) ID of address to return"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
												}
											]
										},
										{
											"name": "Delete a address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Address')"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "{{address2Id}}",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"response": [
												{
													"name": "No Content. Successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) Address id to delete"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Bad Request. Invalid input",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) Address id to delete"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
												},
												{
													"name": "Not Found. URL or item not found",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) Address id to delete"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Data cleanup",
							"item": [
								{
									"name": "Delete a address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Address')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Read List (Check after delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Address - Read list API (after delete): Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Address - Read list API (after delete): check address info\",()=>{\r",
													"    const addressCheck = jsonData.data.filter(check => check.id === pm.collectionVariables.get(\"address1Id\"));\r",
													"    pm.expect(addressCheck).to.be.empty;\r",
													"})\r",
													"\r",
													"pm.collectionVariables.unset(\"address1Id\");\r",
													"pm.collectionVariables.unset(\"address2Id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								}
							],
							"description": "*   Cleanup all testing data generated along with the above tests.\n*   Unset all related variables."
						}
					]
				},
				{
					"name": "[GET] /addresses - Find addresses",
					"item": [
						{
							"name": "Data seeding",
							"item": [
								{
									"name": "Seeding - Create address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
													"    pm.collectionVariables.set(\"address1Id\", pm.response.json().id);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"street\": \"{{street1Name1}}\",\n    \"street2\": \"{{street1Name2}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "Created. Successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Get all address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Address - Read list API: Should return status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Address - Read list API: Should return exact format\", () => {",
													"    pm.response.to.have.jsonSchema({",
													"        type: \"object\",",
													"        properties: {",
													"            count: { type: \"number\" },",
													"            data: {",
													"                type: \"array\",",
													"                items: [{",
													"                    type: \"object\",",
													"                    properties: {",
													"                        id: { type: \"string\" },",
													"                        street: { type: [\"string\", \"null\"] },",
													"                        street2: { type: [\"string\", \"null\"] },",
													"                        city: { type: \"string\" },",
													"                        state: { type: \"string\" },",
													"                        zip: { type: \"string\" },",
													"                        country: { type: \"string\" }",
													"                    }",
													"                }]",
													"            }",
													"        }",
													"    });",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Address - Read list API: check list not empty & contain expected info\",()=>{",
													"    console.log('jsonData', jsonData)",
													"    // pm.expect(jsonData).to.be.not.empty;",
													"",
													"    pm.expect(jsonData.data.length).to.be.greaterThan(0)",
													"    const addressCheck = jsonData.data.filter(check => check.id === pm.collectionVariables.get(\"address1Id\"));",
													"    // pm.expect(addressCheck).to.be.not.empty;",
													"    pm.expect(addressCheck[0].street).to.be.equal(pm.collectionVariables.get(\"street1Name1\"));",
													"    pm.expect(addressCheck[0].street2).to.be.equal(pm.collectionVariables.get(\"street1Name2\"));",
													"    pm.expect(addressCheck[0].city).to.be.equal(pm.collectionVariables.get(\"city1\"));",
													"    pm.expect(addressCheck[0].state).to.be.equal(pm.collectionVariables.get(\"state1\"));",
													"    pm.expect(addressCheck[0].zip).to.be.equal(pm.collectionVariables.get(\"zipcode1\"));",
													"    pm.expect(addressCheck[0].country).to.be.equal(pm.collectionVariables.get(\"country1\"));",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "OK. Successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"city\": \"Houston\",\n  \"country\": \"United States\",\n  \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n  \"state\": \"Texas\",\n  \"zipcode\": \"77002\",\n  \"street\": \"1797 Colonial Drive\",\n  \"street2\": \"411 Patterson Street\"\n },\n {\n  \"city\": \"Houston\",\n  \"country\": \"United States\",\n  \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n  \"state\": \"Texas\",\n  \"zipcode\": \"77002\",\n  \"street\": \"1797 Colonial Drive\",\n  \"street2\": \"411 Patterson Street\"\n }\n]"
										}
									]
								}
							]
						},
						{
							"name": "Data cleanup",
							"item": [
								{
									"name": "Delete a address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Address')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Read List (Check after delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Address - Read list API (after delete): Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Address - Read list API (after delete): check address info\",()=>{\r",
													"    const addressCheck = jsonData.data.filter(check => check.id === pm.collectionVariables.get(\"address1Id\"));\r",
													"    pm.expect(addressCheck).to.be.empty;\r",
													"})\r",
													"\r",
													"pm.collectionVariables.unset(\"address1Id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /addresses/{addressId} - Find an address by ID",
					"item": [
						{
							"name": "Data seeding",
							"item": [
								{
									"name": "Seeding - Create address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
													"    pm.collectionVariables.set(\"address1Id\", pm.response.json().id);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"street\": \"{{street1Name1}}\",\n    \"street2\": \"{{street1Name2}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "Created. Successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Find address by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Address - Read detail API: Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Address - Read detail API: Should return exact format\", () => {",
													"    pm.response.to.have.jsonSchema({",
													"        type: \"object\",",
													"        properties: {",
													"            id: { type: \"string\" },",
													"            street: { type: [\"string\", \"null\"] },",
													"            street2: { type: [\"string\", \"null\"] },",
													"            city: { type: \"string\" },",
													"            state: { type: \"string\" },",
													"            zip: { type: \"string\" },",
													"            country: { type: \"string\" }",
													"        }",
													"    });",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Address - Read detail API: check Address info\",()=>{",
													"    pm.expect(jsonData).to.be.not.empty;    ",
													"    pm.expect(jsonData.id).to.be.equal(pm.collectionVariables.get(\"address1Id\"));  ",
													"    pm.expect(jsonData.street).to.be.equal(pm.collectionVariables.get(\"street1Name1\"));",
													"    pm.expect(jsonData.street2).to.be.equal(pm.collectionVariables.get(\"street1Name2\"));",
													"    pm.expect(jsonData.city).to.be.equal(pm.collectionVariables.get(\"city1\"));",
													"    pm.expect(jsonData.state).to.be.equal(pm.collectionVariables.get(\"state1\"));",
													"    pm.expect(jsonData.zip).to.be.equal(pm.collectionVariables.get(\"zipcode1\"));",
													"    pm.expect(jsonData.country).to.be.equal(pm.collectionVariables.get(\"country1\"));",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) ID of address to return"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK. Successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"city\": \"Houston\",\n \"country\": \"United States\",\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"state\": \"Texas\",\n \"zipcode\": \"77002\",\n \"street\": \"1797 Colonial Drive\",\n \"street2\": \"411 Patterson Street\"\n}"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid ID",
							"item": [
								{
									"name": "Find address by a non-exist ID #EXISTENCE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNotFound('Find address by a non-exist ID')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
													"description": "(Required) ID of address to return"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK. Successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"city\": \"Houston\",\n \"country\": \"United States\",\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"state\": \"Texas\",\n \"zipcode\": \"77002\",\n \"street\": \"1797 Colonial Drive\",\n \"street2\": \"411 Patterson Street\"\n}"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Find address by an invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Address - Read detail API with invalid id: Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json()",
													"pm.test(\"Address - Read detail API with invalid id: Status message is error \", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(400);",
													"    pm.expect(jsonData.error).to.eql(\"Bad Request\");",
													"    pm.expect(jsonData.message).to.eql(\"\\\"id\\\" must be a valid GUID\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "some-invalid-id-here",
													"description": "(Required) ID of address to return"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK. Successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"city\": \"Houston\",\n \"country\": \"United States\",\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"state\": \"Texas\",\n \"zipcode\": \"77002\",\n \"street\": \"1797 Colonial Drive\",\n \"street2\": \"411 Patterson Street\"\n}"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Data cleanup",
							"item": [
								{
									"name": "Delete a address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Address')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Read List (Check after delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Address - Read list API (after delete): Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Address - Read list API (after delete): check address info\",()=>{\r",
													"    const addressCheck = jsonData.data.filter(check => check.id === pm.collectionVariables.get(\"address1Id\"));\r",
													"    pm.expect(addressCheck).to.be.empty;\r",
													"})\r",
													"\r",
													"pm.collectionVariables.unset(\"address1Id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[PATCH] /addresses/{addressId} - Update an address by ID",
					"item": [
						{
							"name": "Data seeding",
							"item": [
								{
									"name": "Create address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
													"    pm.collectionVariables.set(\"address1Id\", pm.response.json().id);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"street\": \"{{street1Name1}}\",\n    \"street2\": \"{{street1Name2}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "Created. Successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Update an existing address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Update address')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressNameUpdate1}}\",\n    \"street\": \"{{street1UpdateName1}}\",\n    \"street2\": \"{{street1UpdateName2}}\",\n    \"city\": \"{{cityUpdate1}}\",\n    \"state\": \"{{stateUpdate1}}\",\n    \"zip\": \"{{zipcodeUpdate1}}\",\n    \"country\": \"{{countryUpdate1}}\"\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Address - Update: with extra \"test\" field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Update address - extra field \"test\"', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"test\\\" is not allowed\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"street\": \"{{street1Name1}}\",\n    \"street2\": \"{{street1Name2}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\",\n    \"test\": \"something\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types (including empty)",
							"item": [
								{
									"name": "Address - Update: empty \"name\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Update address - empty \"city\"', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"city\\\" is not allowed to be empty\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"city\": \"\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Update: empty \"city\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Update address - empty \"name\"', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Update: empty \"state\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Update address - empty \"state\"', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"state\\\" is not allowed to be empty\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Update: empty \"zipcode\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Update address - empty \"zip\"', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"zip\\\" is not allowed to be empty\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Update: empty \"country\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Update address - empty \"country\"', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"country\\\" is not allowed to be empty\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Update: empty request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Update address - empty request body', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"value\\\" must be of type object\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#INTEGRATION",
							"item": [
								{
									"name": "#POSITIVE 1",
									"item": [
										{
											"name": "Find address by ID (after updating)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Address - Read detail API (after update): Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Address - Read detail API (after update): check class info\",()=>{  ",
															"    pm.expect(jsonData).to.be.not.empty;    ",
															"    pm.expect(jsonData.id).to.be.equal(pm.collectionVariables.get(\"address1Id\"));  ",
															"    pm.expect(jsonData.street).to.be.equal(pm.collectionVariables.get(\"street1UpdateName1\"));",
															"    pm.expect(jsonData.street2).to.be.equal(pm.collectionVariables.get(\"street1UpdateName2\"));",
															"    pm.expect(jsonData.city).to.be.equal(pm.collectionVariables.get(\"cityUpdate1\"));",
															"    pm.expect(jsonData.state).to.be.equal(pm.collectionVariables.get(\"stateUpdate1\"));",
															"    pm.expect(jsonData.zip).to.be.equal(pm.collectionVariables.get(\"zipcodeUpdate1\"));",
															"    pm.expect(jsonData.country).to.be.equal(pm.collectionVariables.get(\"countryUpdate1\"));",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "{{address1Id}}",
															"description": "(Required) ID of address to return"
														}
													]
												}
											},
											"response": [
												{
													"name": "OK. Successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) ID of address to return"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"city\": \"Houston\",\n \"country\": \"United States\",\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"state\": \"Texas\",\n \"zipcode\": \"77002\",\n \"street\": \"1797 Colonial Drive\",\n \"street2\": \"411 Patterson Street\"\n}"
												},
												{
													"name": "Bad Request. Invalid input",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) ID of address to return"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
												},
												{
													"name": "Not Found. URL or item not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/addresses/:addressId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"addresses",
																":addressId"
															],
															"variable": [
																{
																	"key": "addressId",
																	"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
																	"description": "(Required) ID of address to return"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Data cleanup",
							"item": [
								{
									"name": "Delete a address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Address')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Address - Read List (Check after delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Address - Read list API (after delete): Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Address - Read list API (after delete): check address info\",()=>{\r",
													"    const addressCheck = jsonData.data.filter(check => check.id === pm.collectionVariables.get(\"address1Id\"));\r",
													"    pm.expect(addressCheck).to.be.empty;\r",
													"})\r",
													"\r",
													"pm.collectionVariables.unset(\"address1Id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[DELETE] /addresses/{addressId} - Delete an address by ID",
					"item": [
						{
							"name": "Data seeding",
							"item": [
								{
									"name": "Create address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
													"    pm.collectionVariables.set(\"address1Id\", pm.response.json().id);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{addressName1}}\",\n    \"street\": \"{{street1Name1}}\",\n    \"street2\": \"{{street1Name2}}\",\n    \"city\": \"{{city1}}\",\n    \"state\": \"{{state1}}\",\n    \"zip\": \"{{zipcode1}}\",\n    \"country\": \"{{country1}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses"
											]
										}
									},
									"response": [
										{
											"name": "Created. Successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Delete a address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Address', ()=>{\r",
													"    pm.collectionVariables.unset(\"address1Id\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "{{address1Id}}",
													"description": "(Required) Address id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE",
							"item": [
								{
									"name": "Delete a address by a non-exist ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNotFound('Delete address - non-exist ID')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "df44cc2c-88c8-45bc-83ec-66a854aa1333",
													"description": "(Required) Address id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								},
								{
									"name": "Delete a address by an invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertNegative('Delete address - invalid ID', (jsonData) => {",
													"    pm.expect(jsonData.message).to.eql(\"\\\"id\\\" must be a valid GUID\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/addresses/:addressId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"addresses",
												":addressId"
											],
											"variable": [
												{
													"key": "addressId",
													"value": "an-invalid-id-here",
													"description": "(Required) Address id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/addresses/:addressId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"addresses",
														":addressId"
													],
													"variable": [
														{
															"key": "addressId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Address id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Driver",
			"item": [
				{
					"name": "Data seeding",
					"item": [
						{
							"name": "Create address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Address', () => {",
											"    pm.collectionVariables.set(\"driverAddress1Id\", pm.response.json().id);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Address Name\",\n    \"street\": \"25 Nguyen Dinh Chieu\",\n    \"street2\": \"14 Doan Tran Nghiep\",\n    \"city\": \"Nha Trang\",\n    \"state\": \"Khanh Hoa\",\n    \"zip\": \"65000\",\n    \"country\": \"Viet Nam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addresses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Address', () => {",
											"    pm.collectionVariables.set(\"driverAddress2Id\", pm.response.json().id);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Address Name 2\",\n    \"street\": \"5 Pham Van Dong\",\n    \"street2\": \"\",\n    \"city\": \"Nha Trang\",\n    \"state\": \"Khanh Hoa\",\n    \"zip\": \"65000\",\n    \"country\": \"Viet Nam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addresses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Team', () => {\r",
											"    pm.collectionVariables.set(\"driverTeam1Id\", pm.response.json().id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TOYOTA GAZOO RACING\",\n    \"nationality\": \"USA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"response": []
						}
					],
					"description": "Generate testing data"
				},
				{
					"name": "[POST] /drivers - Create driver",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Create driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Driver', () => {\r",
													"    pm.collectionVariables.set(\"driver1Id\", pm.response.json().id);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Nguyen\",\n    \"lastName\": \"An\",\n    \"nationality\": \"Viet Nam\",\n    \"homeAddress\": \"{{driverAddress1Id}}\",\n    \"managementAddress\": \"{{driverAddress2Id}}\",\n    \"teams\": [\n        \"{{driverTeam1Id}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								}
							],
							"description": "happy cases"
						},
						{
							"name": "#NEGATIVE - Missing required fields",
							"item": [
								{
									"name": "Create driver - Missing first name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} missing first name`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create driver - Missing last name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} missing last name`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"lastName\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Create driver - Extra gender and date of birth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} extra gender and date of birth`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"gender\\\" is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"gender\": \"Male\",\r\n    \"dateOfBirth\": \"08/18/1996\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types (including empty)",
							"item": [
								{
									"name": "Create driver - First name is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} first name is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create driver - Last name is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} last name is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"lastName\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create driver - Nationality is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} nationality is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"nationality\\\" must be one of [USA, Viet Nam]\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create driver - Home address isn't valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} management address isn't valid`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create driver - Management address isn't valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} management address isn't valid`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /drivers - Get all driver",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Get all driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Get list API\";\r",
													"\r",
													"pm.test(`${testTitle}: Should return status code 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle}: Should return exact format`, () => {\r",
													"    const addressSchema = {\r",
													"        anyOf: [\r",
													"            {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"string\" },\r",
													"                    name: { type: \"string\" },\r",
													"                    street: { type: [\"string\", \"null\"] },\r",
													"                    street2: { type: [\"string\", \"null\"] },\r",
													"                    city: { type: \"string\" },\r",
													"                    state: { type: \"string\" },\r",
													"                    zip: { type: \"string\" },\r",
													"                    country: { type: \"string\" }\r",
													"                }\r",
													"            },\r",
													"            { type: \"null\" }\r",
													"        ]\r",
													"    }\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"            count: { type: \"number\" },\r",
													"            data: {\r",
													"                type: \"array\",\r",
													"                items: [{\r",
													"                    type: \"object\",\r",
													"                    properties: {\r",
													"                        id: { type: \"string\" },\r",
													"                        firstName: { type: \"string\" },\r",
													"                        lastName: { type: \"string\" },\r",
													"                        nationality: { type: \"string\" },\r",
													"                        homeAddress: addressSchema,\r",
													"                        managementAddress: addressSchema,\r",
													"                        teams: {\r",
													"                            type: \"array\",\r",
													"                            items: [{\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"string\" },\r",
													"                                    name: { type: \"string\" },\r",
													"                                    nationality: { type: \"string\" },\r",
													"                                    businessAddress: addressSchema,\r",
													"                                }\r",
													"                            }]\r",
													"                        }\r",
													"                    }\r",
													"                }]\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle}: check list not empty & contain expected info`,()=>{\r",
													"    pm.expect(jsonData.data.length).to.be.greaterThan(0)\r",
													"    const itemCheck = jsonData.data.find(check => check.id === pm.collectionVariables.get(\"driver1Id\"));\r",
													"    pm.expect(itemCheck.firstName).to.be.equal(\"Nguyen\");\r",
													"    pm.expect(itemCheck.lastName).to.be.equal(\"An\");\r",
													"    pm.expect(itemCheck.nationality).to.be.equal(\"Viet Nam\");\r",
													"    pm.expect(itemCheck.homeAddress).to.be.an(\"object\");\r",
													"    pm.expect(itemCheck.homeAddress.street).to.be.equal(\"25 Nguyen Dinh Chieu\");\r",
													"    pm.expect(itemCheck.homeAddress.street2).to.be.equal(\"14 Doan Tran Nghiep\");\r",
													"    pm.expect(itemCheck.homeAddress.city).to.be.equal(\"Nha Trang\");\r",
													"    pm.expect(itemCheck.homeAddress.state).to.be.equal(\"Khanh Hoa\");\r",
													"    pm.expect(itemCheck.homeAddress.zip).to.be.equal(\"65000\");\r",
													"    pm.expect(itemCheck.homeAddress.country).to.be.equal(\"Viet Nam\");\r",
													"    pm.expect(itemCheck.managementAddress).to.be.an(\"object\");\r",
													"    pm.expect(itemCheck.managementAddress.street).to.be.equal(\"5 Pham Van Dong\");\r",
													"    pm.expect(itemCheck.managementAddress.street2).to.be.equal(\"\");\r",
													"    pm.expect(itemCheck.managementAddress.city).to.be.equal(\"Nha Trang\");\r",
													"    pm.expect(itemCheck.managementAddress.state).to.be.equal(\"Khanh Hoa\");\r",
													"    pm.expect(itemCheck.managementAddress.zip).to.be.equal(\"65000\");\r",
													"    pm.expect(itemCheck.managementAddress.country).to.be.equal(\"Viet Nam\");\r",
													"    pm.expect(itemCheck.teams).to.be.an(\"array\");\r",
													"    pm.expect(itemCheck.teams[0].name).to.be.equal(\"TOYOTA GAZOO RACING\");\r",
													"    pm.expect(itemCheck.teams[0].nationality).to.be.equal(\"USA\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[PATCH] /drivers/{driverId} - Update an existing driver",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Update an existing driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Driver')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Nguyen\",\n    \"lastName\": \"An 1\",\n    \"nationality\": \"USA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}",
													"description": "(Required) Driver id need to be updated"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "happy cases"
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Update an existing driver - Extra gender and date of birth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} extra gender and date of birth`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"gender\\\" is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"gender\": \"Male\",\r\n    \"dateOfBirth\": \"08/18/1996\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types (including empty)",
							"item": [
								{
									"name": "Update an existing driver - First name is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} first name is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing driver - Last name is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} nationality is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"nationality\\\" must be one of [USA, Viet Nam]\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing driver - Nationality is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} first name is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"firstName\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing driver - Home address isn't valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} management address isn't valid`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\r\n    \"managementAddress\": \"{{driverAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing driver - Management address isn't valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} management address isn't valid`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An\",\r\n    \"nationality\": \"Viet Nam\",\r\n    \"homeAddress\": \"{{driverAddress1Id}}\",\r\n    \"managementAddress\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing driver - Driver ID not valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNotFound(`${testTitle} driver not found`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"firstName\": \"Nguyen\",\r\n    \"lastName\": \"An 1\",\r\n    \"nationality\": \"USA\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /drivers/{driverId} - Find driver by ID",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Find driver by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Get detail API\";\r",
													"\r",
													"pm.test(`${testTitle}: Should return status code 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle}: Should return exact format`, () => {\r",
													"    const addressSchema = {\r",
													"        anyOf: [\r",
													"            {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"string\" },\r",
													"                    name: { type: \"string\" },\r",
													"                    street: { type: [\"string\", \"null\"] },\r",
													"                    street2: { type: [\"string\", \"null\"] },\r",
													"                    city: { type: \"string\" },\r",
													"                    state: { type: \"string\" },\r",
													"                    zip: { type: \"string\" },\r",
													"                    country: { type: \"string\" }\r",
													"                }\r",
													"            },\r",
													"            { type: \"null\" }\r",
													"        ]\r",
													"    }\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"            id: { type: \"string\" },\r",
													"            firstName: { type: \"string\" },\r",
													"            lastName: { type: \"string\" },\r",
													"            nationality: { type: \"string\" },\r",
													"            homeAddress: addressSchema,\r",
													"            managementAddress: addressSchema,\r",
													"            teams: {\r",
													"                type: \"array\",\r",
													"                items: [{\r",
													"                    type: \"object\",\r",
													"                    properties: {\r",
													"                        id: { type: \"string\" },\r",
													"                        name: { type: \"string\" },\r",
													"                        nationality: { type: \"string\" },\r",
													"                        businessAddress: addressSchema,\r",
													"                    }\r",
													"                }]\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle}: check list not empty & contain expected info`,()=>{\r",
													"    pm.expect(jsonData).to.be.an(\"object\")\r",
													"    pm.expect(jsonData.firstName).to.be.equal(\"Nguyen\");\r",
													"    pm.expect(jsonData.lastName).to.be.equal(\"An 1\");\r",
													"    pm.expect(jsonData.nationality).to.be.equal(\"USA\");\r",
													"    pm.expect(jsonData.homeAddress).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.homeAddress.street).to.be.equal(\"25 Nguyen Dinh Chieu\");\r",
													"    pm.expect(jsonData.homeAddress.street2).to.be.equal(\"14 Doan Tran Nghiep\");\r",
													"    pm.expect(jsonData.homeAddress.city).to.be.equal(\"Nha Trang\");\r",
													"    pm.expect(jsonData.homeAddress.state).to.be.equal(\"Khanh Hoa\");\r",
													"    pm.expect(jsonData.homeAddress.zip).to.be.equal(\"65000\");\r",
													"    pm.expect(jsonData.homeAddress.country).to.be.equal(\"Viet Nam\");\r",
													"    pm.expect(jsonData.managementAddress).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.managementAddress.street).to.be.equal(\"5 Pham Van Dong\");\r",
													"    pm.expect(jsonData.managementAddress.street2).to.be.equal(\"\");\r",
													"    pm.expect(jsonData.managementAddress.city).to.be.equal(\"Nha Trang\");\r",
													"    pm.expect(jsonData.managementAddress.state).to.be.equal(\"Khanh Hoa\");\r",
													"    pm.expect(jsonData.managementAddress.zip).to.be.equal(\"65000\");\r",
													"    pm.expect(jsonData.managementAddress.country).to.be.equal(\"Viet Nam\");\r",
													"    pm.expect(jsonData.teams).to.be.an(\"array\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}",
													"description": "(Required) ID of driver to return"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Find driver by ID - Driver ID not valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Get detail API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNotFound(`${testTitle} driver not found`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /drivers/{driverId}/results - All race results for that driver",
					"item": [
						{
							"name": "Data seeding",
							"item": [
								{
									"name": "Create class",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
													"    pm.collectionVariables.set(\"driverClass1Id\", pm.response.json().id);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"LM GTE AM\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/classes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Race', () => {\r",
													"    pm.collectionVariables.set(\"driverRace1Id\", pm.response.json().id);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create car",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Car', () => {\r",
													"    pm.collectionVariables.set(\"driverCar1Id\", pm.response.json().id);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Ferrari\",\n    \"class\": \"{{driverClass1Id}}\",\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GTE-LM\",\n    \"team\": \"{{driverTeam1Id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add race results for that race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Car', () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.ids).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.ids.length).to.equal(1);\r",
													"    pm.collectionVariables.set(\"driverRaceResult1Id\", jsonData.ids[0]);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [\n        {\n            \"class\": \"{{driverClass1Id}}\",\n            \"car\": \"{{driverCar1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 166,\n            \"startingPosition\": 1,\n            \"isFinished\": true,\n            \"finishingPosition\": 3\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{driverRace1Id}}",
													"description": "(Required) ID of race to add"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "All race results for that driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Get race result of driver API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"const addressSchema = {\r",
													"    anyOf: [\r",
													"        {\r",
													"            type: \"object\",\r",
													"            properties: {\r",
													"                id: { type: \"string\" },\r",
													"                name: { type: \"string\" },\r",
													"                street: { type: [\"string\", \"null\"] },\r",
													"                street2: { type: [\"string\", \"null\"] },\r",
													"                city: { type: \"string\" },\r",
													"                state: { type: \"string\" },\r",
													"                zip: { type: \"string\" },\r",
													"                country: { type: \"string\" }\r",
													"            }\r",
													"        },\r",
													"        {\r",
													"            type: \"null\"\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"const schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        count: { type: \"number\" },\r",
													"        data: {\r",
													"            type: \"array\",\r",
													"            items: [{\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"string\" },\r",
													"                    raceNumber: { type: \"string\" },\r",
													"                    startPosition: { type: \"number\" },\r",
													"                    finishPosition: { type: \"number\" },\r",
													"                    race: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            name: { type: \"string\" }\r",
													"                        }\r",
													"                    },\r",
													"                    class: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            name: { type: \"string\" }\r",
													"                        }\r",
													"                    },\r",
													"                    car: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            make: { type: \"string\" },\r",
													"                            model: { type: \"string\" },\r",
													"                            class: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"string\" },\r",
													"                                    name: { type: \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        } \r",
													"                    },\r",
													"                    driver: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            firstName: { type: \"string\" },\r",
													"                            lastName: { type: \"string\" },\r",
													"                            nationality: { type: \"string\" },\r",
													"                            homeAddress: addressSchema,\r",
													"                            managementAddress: addressSchema\r",
													"                        } \r",
													"                    }\r",
													"                }\r",
													"            }]\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(`${testTitle} Validate schema`,()=>{\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId",
												"results"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}",
													"description": "(Required) ID of driver to return"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Data cleanup",
							"item": [
								{
									"name": "Delete a race result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Driver', ()=>{\r",
													"    pm.collectionVariables.unset(\"driverRaceResult1Id\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/race-results/:raceResultId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"race-results",
												":raceResultId"
											],
											"variable": [
												{
													"key": "raceResultId",
													"value": "{{driverRaceResult1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a car",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Driver', ()=>{\r",
													"    pm.collectionVariables.unset(\"driverCar1Id\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/cars/:carId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												":carId"
											],
											"variable": [
												{
													"key": "carId",
													"value": "{{driverCar1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Driver', ()=>{\r",
													"    pm.collectionVariables.unset(\"driverRace1Id\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{driverRace1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a class",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Race Result', ()=>{\r",
													"    pm.collectionVariables.unset(\"driverClass1Id\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/classes/:classId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classes",
												":classId"
											],
											"variable": [
												{
													"key": "classId",
													"value": "{{driverClass1Id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[DELETE] /drivers/{driverId} - Delete a driver",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Delete a driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Driver')\r",
													"pm.collectionVariables.unset(\"driver1Id\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{driver1Id}}",
													"description": "(Required) Driver id to delete"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Delete a driver - Driver ID not valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Delete API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNotFound(`${testTitle} driver not found`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Data cleanup",
					"item": [
						{
							"name": "Delete a address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Address', ()=>{\r",
											"    pm.collectionVariables.unset(\"driverAddress2Id\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/addresses/:addressId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{driverAddress2Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a address(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Address', ()=>{\r",
											"    pm.collectionVariables.unset(\"driverAddress1Id\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/addresses/:addressId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{driverAddress1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Address', ()=>{",
											"    pm.collectionVariables.unset(\"driverTeam1Id\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/teams/:teamId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										":teamId"
									],
									"variable": [
										{
											"key": "teamId",
											"value": "{{driverTeam1Id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Team",
			"item": [
				{
					"name": "Data seeding",
					"item": [
						{
							"name": "Create class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Class', () => {",
											"    pm.collectionVariables.set(\"teamClass1Id\", pm.response.json().id);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"LM GTE AM\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Address', () => {",
											"    pm.collectionVariables.set(\"teamAddress1Id\", pm.response.json().id);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Address Name 1\",\n    \"street\": \"25 Nguyen Dinh Chieu\",\n    \"street2\": \"14 Doan Tran Nghiep\",\n    \"city\": \"Nha Trang\",\n    \"state\": \"Khanh Hoa\",\n    \"zip\": \"65000\",\n    \"country\": \"Viet Nam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addresses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertCreatePositive('Address', () => {",
											"    pm.collectionVariables.set(\"teamAddress2Id\", pm.response.json().id);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Address Name 2\",\n    \"street\": \"5 Pham Van Dong\",\n    \"street2\": \"\",\n    \"city\": \"Nha Trang\",\n    \"state\": \"Khanh Hoa\",\n    \"zip\": \"65000\",\n    \"country\": \"Viet Nam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addresses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses"
									]
								}
							},
							"response": []
						}
					],
					"description": "Generate testing data"
				},
				{
					"name": "[POST] /teams \"Create team\"",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Create team",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Team', () => {\r",
													"    pm.collectionVariables.set(\"team1Id\", pm.response.json().id);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TOYOTA GAZOO RACING\",\n    \"nationality\": \"USA\",\n    \"businessAddress\": \"{{teamAddress2Id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams"
											]
										}
									},
									"response": [
										{
											"name": "Created. Successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "40e6215d-b5c6-4896-987c-f30f3678f608"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE - Missing required fields",
							"item": [
								{
									"name": "Create team - Missing name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} missing name`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nationality\": \"USA\",\r\n    \"businessAddress\": \"{{teamAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Create team - Extra size fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} extra size`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"size\\\" is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"TOYOTA GAZOO RACING\",\r\n    \"size\": \"20 - 30\",\r\n    \"nationality\": \"USA\",\r\n    \"businessAddress\": \"{{teamAddress2Id}}\",\r\n    \"drivers\": [\r\n        \"{{teamDriver1Id}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types (including empty)",
							"item": [
								{
									"name": "Create team - Name is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} name is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"nationality\": \"USA\",\r\n    \"businessAddress\": \"{{teamAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create team - Nationality is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} nationality is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"nationality\\\" must be one of [USA, Viet Nam]\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"TOYOTA GAZOO RACING\",\r\n    \"nationality\": \"\",\r\n    \"businessAddress\": \"{{teamAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create team - Business address isn't valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Create new API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} nationality is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"TOYOTA GAZOO RACING\",\r\n    \"nationality\": \"USA\",\r\n    \"businessAddress\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /teams \"Get all team\"",
					"item": [
						{
							"name": "Data seeding",
							"item": [
								{
									"name": "Create driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Driver', () => {\r",
													"    pm.collectionVariables.set(\"teamDriver1Id\", pm.response.json().id);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Nguyen\",\n    \"lastName\": \"An\",\n    \"nationality\": \"Viet Nam\",\n    \"managementAddress\": \"{{teamAddress1Id}}\",\n    \"teams\": [\n        \"{{team1Id}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/drivers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create car",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertCreatePositive('Car', () => {\r",
													"    pm.collectionVariables.set(\"teamCar1Id\", pm.response.json().id);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Ferrari\",\n    \"class\": \"{{teamClass1Id}}\",\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GTE-LM\",\n    \"team\": \"{{team1Id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Get all team",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Get list API\";\r",
													"\r",
													"pm.test(`${testTitle}: Should return status code 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle}: Should return exact format`, () => {\r",
													"    const addressSchema = {\r",
													"        anyOf: [\r",
													"            {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"string\" },\r",
													"                    name: { type: \"string\" },\r",
													"                    street: { type: [\"string\", \"null\"] },\r",
													"                    street2: { type: [\"string\", \"null\"] },\r",
													"                    city: { type: \"string\" },\r",
													"                    state: { type: \"string\" },\r",
													"                    zip: { type: \"string\" },\r",
													"                    country: { type: \"string\" }\r",
													"                }\r",
													"            },\r",
													"            { type: \"null\" }\r",
													"        ]\r",
													"    }\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"            count: { type: \"number\" },\r",
													"            data: {\r",
													"                type: \"array\",\r",
													"                items: [{\r",
													"                    type: \"object\",\r",
													"                    properties: {\r",
													"                        id: { type: \"string\" },\r",
													"                        name: { type: \"string\" },\r",
													"                        nationality: { type: \"string\" },\r",
													"                        businessAddress: addressSchema,\r",
													"                    }\r",
													"                }]\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle}: check list not empty & contain expected info`,()=>{\r",
													"    pm.expect(jsonData.data.length).to.be.greaterThan(0)\r",
													"    const itemCheck = jsonData.data.find(check => check.id === pm.collectionVariables.get(\"team1Id\"));\r",
													"    pm.expect(itemCheck.name).to.be.equal(\"TOYOTA GAZOO RACING\");\r",
													"    pm.expect(itemCheck.nationality).to.be.equal(\"USA\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/teams",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams"
											]
										}
									},
									"response": [
										{
											"name": "OK. Successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"cars\": [\n   {\n    \"class\": {\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"name\": \"LM GTE AM\"\n    },\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GTE-LM\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\n   },\n   {\n    \"class\": {\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"name\": \"LM GTE AM\"\n    },\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GTE-LM\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\n   }\n  ],\n  \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n  \"name\": \"7 TOYOTA GAZOO RACING\",\n  \"nationality\": \"USA\",\n  \"businessAddress\": {\n   \"city\": \"Houston\",\n   \"country\": \"United States\",\n   \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n   \"state\": \"Texas\",\n   \"zipcode\": \"77002\",\n   \"street\": \"1797 Colonial Drive\",\n   \"street2\": \"411 Patterson Street\"\n  },\n  \"drivers\": [\n   {\n    \"firstName\": \"Nguyen\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"lastName\": \"An\",\n    \"nationality\": \"Viet Nam\",\n    \"homeAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    },\n    \"managementAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    }\n   },\n   {\n    \"firstName\": \"Nguyen\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"lastName\": \"An\",\n    \"nationality\": \"Viet Nam\",\n    \"homeAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    },\n    \"managementAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    }\n   }\n  ]\n },\n {\n  \"cars\": [\n   {\n    \"class\": {\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"name\": \"LM GTE AM\"\n    },\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GTE-LM\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\n   },\n   {\n    \"class\": {\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"name\": \"LM GTE AM\"\n    },\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GTE-LM\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\n   }\n  ],\n  \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n  \"name\": \"7 TOYOTA GAZOO RACING\",\n  \"nationality\": \"Viet Nam\",\n  \"businessAddress\": {\n   \"city\": \"Houston\",\n   \"country\": \"United States\",\n   \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n   \"state\": \"Texas\",\n   \"zipcode\": \"77002\",\n   \"street\": \"1797 Colonial Drive\",\n   \"street2\": \"411 Patterson Street\"\n  },\n  \"drivers\": [\n   {\n    \"firstName\": \"Nguyen\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"lastName\": \"An\",\n    \"nationality\": \"USA\",\n    \"homeAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    },\n    \"managementAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    }\n   },\n   {\n    \"firstName\": \"Nguyen\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"lastName\": \"An\",\n    \"nationality\": \"Viet Nam\",\n    \"homeAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    },\n    \"managementAddress\": {\n     \"city\": \"Houston\",\n     \"country\": \"United States\",\n     \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n     \"state\": \"Texas\",\n     \"zipcode\": \"77002\",\n     \"street\": \"1797 Colonial Drive\",\n     \"street2\": \"411 Patterson Street\"\n    }\n   }\n  ]\n }\n]"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "[PATCH] /teams/{teamId} \"Update an existing team\"",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Update an existing team",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Team')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"ALGARVE PRO RACING\",\n    \"nationality\": \"Viet Nam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "{{team1Id}}",
													"description": "(Required) Team id need to be updated"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Team id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Team id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Team id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Update an existing team - Extra size fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} extra size`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"size\\\" is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"TOYOTA GAZOO RACING\",\r\n    \"size\": \"20 - 30\",\r\n    \"nationality\": \"USA\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "{{team1Id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types (including empty)",
							"item": [
								{
									"name": "Update an existing team - Name is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} name is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"nationality\": \"USA\",\r\n    \"businessAddress\": \"{{teamAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "{{team1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing team - Nationality is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} nationality is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"\\\"nationality\\\" must be one of [USA, Viet Nam]\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"TOYOTA GAZOO RACING\",\r\n    \"nationality\": \"\",\r\n    \"businessAddress\": \"{{teamAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "{{team1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing team - Business address isn't valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNegative(`${testTitle} nationality is empty`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"TOYOTA GAZOO RACING\",\r\n    \"nationality\": \"USA\",\r\n    \"businessAddress\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "{{team1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing team - Team ID not valid Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Update API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNotFound(`${testTitle} driver not found`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"TOYOTA GAZOO RACING\",\r\n    \"nationality\": \"USA\",\r\n    \"businessAddress\": \"{{teamAddress2Id}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /teams/{teamId} \"Find team by ID\"",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Find team by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Driver - Get list API\";\r",
													"\r",
													"pm.test(`${testTitle}: Should return status code 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle}: Should return exact format`, () => {\r",
													"    const addressSchema = {\r",
													"        anyOf: [\r",
													"            {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"string\" },\r",
													"                    name: { type: \"string\" },\r",
													"                    street: { type: [\"string\", \"null\"] },\r",
													"                    street2: { type: [\"string\", \"null\"] },\r",
													"                    city: { type: \"string\" },\r",
													"                    state: { type: \"string\" },\r",
													"                    zip: { type: \"string\" },\r",
													"                    country: { type: \"string\" }\r",
													"                }\r",
													"            },\r",
													"            { type: \"null\" }\r",
													"        ]\r",
													"    }\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"            id: { type: \"string\" },\r",
													"            name: { type: \"string\" },\r",
													"            nationality: { type: \"string\" },\r",
													"            businessAddress: addressSchema,\r",
													"            cars: {\r",
													"                type: \"array\",\r",
													"                items: [{\r",
													"                    type: \"object\",\r",
													"                    properties: {\r",
													"                        id: { type: \"string\" },\r",
													"                        make: { type: \"string\" },\r",
													"                        model: { type: \"string\" },\r",
													"                        class: {\r",
													"                            type: \"object\",\r",
													"                            properties: {\r",
													"                                id: { type: \"string\" },\r",
													"                                name: { type: \"string\" }\r",
													"                            }\r",
													"                        }\r",
													"                    }\r",
													"                }]\r",
													"            },\r",
													"            drivers: {\r",
													"                type: \"array\",\r",
													"                items: [{\r",
													"                    type: \"object\",\r",
													"                    properties: {\r",
													"                        id: { type: \"string\" },\r",
													"                        firstName: { type: \"string\" },\r",
													"                        lastName: { type: \"string\" },\r",
													"                        nationality: { type: \"string\" },\r",
													"                        homeAddress: addressSchema,\r",
													"                        managementAddress: addressSchema\r",
													"                    }\r",
													"                }]\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle}: check list not empty & contain expected info`,()=>{\r",
													"    pm.expect(jsonData.name).to.be.equal(\"ALGARVE PRO RACING\");\r",
													"    pm.expect(jsonData.nationality).to.be.equal(\"Viet Nam\");\r",
													"    pm.expect(jsonData.businessAddress).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.businessAddress.street).to.be.equal(\"5 Pham Van Dong\");\r",
													"    pm.expect(jsonData.businessAddress.street2).to.be.equal(\"\");\r",
													"    pm.expect(jsonData.businessAddress.city).to.be.equal(\"Nha Trang\");\r",
													"    pm.expect(jsonData.businessAddress.state).to.be.equal(\"Khanh Hoa\");\r",
													"    pm.expect(jsonData.businessAddress.zip).to.be.equal(\"65000\");\r",
													"    pm.expect(jsonData.businessAddress.country).to.be.equal(\"Viet Nam\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "{{team1Id}}",
													"description": "(Required) ID of team to return"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK. Successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of team to return"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"cars\": [\n  {\n   \"class\": {\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"name\": \"LM GTE AM\"\n   },\n   \"make\": \"Ferrari\",\n   \"model\": \"488 GTE-LM\",\n   \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\n  },\n  {\n   \"class\": {\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"name\": \"LM GTE AM\"\n   },\n   \"make\": \"Ferrari\",\n   \"model\": \"488 GTE-LM\",\n   \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\"\n  }\n ],\n \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n \"name\": \"7 TOYOTA GAZOO RACING\",\n \"nationality\": \"USA\",\n \"businessAddress\": {\n  \"city\": \"Houston\",\n  \"country\": \"United States\",\n  \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n  \"state\": \"Texas\",\n  \"zipcode\": \"77002\",\n  \"street\": \"1797 Colonial Drive\",\n  \"street2\": \"411 Patterson Street\"\n },\n \"drivers\": [\n  {\n   \"firstName\": \"Nguyen\",\n   \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n   \"lastName\": \"An\",\n   \"nationality\": \"USA\",\n   \"homeAddress\": {\n    \"city\": \"Houston\",\n    \"country\": \"United States\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"state\": \"Texas\",\n    \"zipcode\": \"77002\",\n    \"street\": \"1797 Colonial Drive\",\n    \"street2\": \"411 Patterson Street\"\n   },\n   \"managementAddress\": {\n    \"city\": \"Houston\",\n    \"country\": \"United States\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"state\": \"Texas\",\n    \"zipcode\": \"77002\",\n    \"street\": \"1797 Colonial Drive\",\n    \"street2\": \"411 Patterson Street\"\n   }\n  },\n  {\n   \"firstName\": \"Nguyen\",\n   \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n   \"lastName\": \"An\",\n   \"nationality\": \"Viet Nam\",\n   \"homeAddress\": {\n    \"city\": \"Houston\",\n    \"country\": \"United States\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"state\": \"Texas\",\n    \"zipcode\": \"77002\",\n    \"street\": \"1797 Colonial Drive\",\n    \"street2\": \"411 Patterson Street\"\n   },\n   \"managementAddress\": {\n    \"city\": \"Houston\",\n    \"country\": \"United States\",\n    \"id\": \"40e6215d-b5c6-4896-987c-f30f3678f608\",\n    \"state\": \"Texas\",\n    \"zipcode\": \"77002\",\n    \"street\": \"1797 Colonial Drive\",\n    \"street2\": \"411 Patterson Street\"\n   }\n  }\n ]\n}"
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of team to return"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) ID of team to return"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Find team bt ID - Team ID not valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Get detail API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNotFound(`${testTitle} team not found`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Data cleanup",
							"item": [
								{
									"name": "Delete driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Driver', ()=>{\r",
													"    pm.collectionVariables.unset(\"teamDriver1Id\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/drivers/:driverId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers",
												":driverId"
											],
											"variable": [
												{
													"key": "driverId",
													"value": "{{teamDriver1Id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete car",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Car', ()=>{\r",
													"    pm.collectionVariables.unset(\"teamCar1Id\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/cars/:carId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												":carId"
											],
											"variable": [
												{
													"key": "carId",
													"value": "{{teamCar1Id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[DELETE] /teams/{teamId} \"Delete a team\"",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Delete a team",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(globals.loadUtils).assertUpdateDeletePositive('Delete Team')\r",
													"pm.collectionVariables.unset(\"team1Id\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "{{team1Id}}",
													"description": "(Required) Team id to delete"
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Team id to delete"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Team id to delete"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/teams/:teamId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														":teamId"
													],
													"variable": [
														{
															"key": "teamId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Team id to delete"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Delete a team - Team ID not valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Team - Delete API\";\r",
													"\r",
													"eval(globals.loadUtils).assertNotFound(`${testTitle} team not found`, (jsonData) => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/teams/:teamId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":teamId"
											],
											"variable": [
												{
													"key": "teamId",
													"value": "40e6215d-b5c6-4896-987c-f30f3678f608"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Data cleanup",
					"item": [
						{
							"name": "Delete a address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Address', ()=>{\r",
											"    pm.collectionVariables.unset(\"teamAddress1Id\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/addresses/:addressId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{teamAddress1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a address(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Address', ()=>{\r",
											"    pm.collectionVariables.unset(\"teamAddress2Id\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/addresses/:addressId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{teamAddress2Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.loadUtils).assertUpdateDeletePositive('Class', ()=>{",
											"    pm.collectionVariables.unset(\"teamClass1Id\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{teamClass1Id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Car",
			"item": [
				{
					"name": "Data seeding",
					"item": [
						{
							"name": "Add a new team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add driver successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"teamID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ferrari racing team\",\n  \"nationality\": \"USA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add driver successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"driverID\", pm.response.json().id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Nguyen\",\n  \"lastName\": \"An\",\n  \"nationality\": \"Viet Nam\",\n  \"teams\": [\n      \"{{teamID}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add class successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"classID\", pm.response.json().id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"LM GTE AM\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new car (Ferrari)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add driver successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.expect(pm.response.json().id).to.be.a(\"string\");",
											"    pm.expect(pm.response.json().id).to.have.lengthOf(36);",
											"",
											"    pm.collectionVariables.set(\"carID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ferrari\",\n  \"make\": \"Ferrari\",\n  \"model\": \"488 GTE-LM\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new race",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add a race successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"raceID\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Le Mans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/races",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new race result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add a new race result\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    responseData = pm.response.json().ids;",
											"",
											"    pm.expect(responseData[0]).to.be.a(\"string\");",
											"    pm.expect(responseData[0]).to.have.lengthOf(36);",
											"",
											"    pm.collectionVariables.set(\"raceResultId\", responseData[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"results\": [\n    {\n        \"car\": \"{{carID}}\",\n        \"driver\": \"{{driverID}}\",\n        \"class\": \"{{classID}}\",\n        \"carNumber\": 200,\n        \"startingPosition\": 2,\n        \"isFinished\": true,\n        \"finishingPosition\": 3\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/races/{{raceID}}/results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races",
										"{{raceID}}",
										"results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[POST] /cars - Create car",
					"item": [
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Car - make is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't create a car if 'make' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": 123,\n  \"model\": \"488 GTE-LM\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Car - model  is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't create a car if 'model' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Ferrari\",\n  \"model\": 123,\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Car - class is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't create a car if 'class' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Ferrari\",\n  \"model\": \"488 GTE-LM\",\n  \"class\": 123,\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Car - team is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't create a car if 'team' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Ferrari\",\n  \"model\": \"488 GTE-LM\",\n  \"class\": \"{{classID}}\",\n  \"team\": 123\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Request data",
							"item": [
								{
									"name": "Long string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't create a car with a long string\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium\",\n  \"model\": \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Missing required fields",
							"item": [
								{
									"name": "make is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'make' is missing\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"model\": \"CMR12004\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "model is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'model' is missing\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"BMW\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "class is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'class' is missing\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"BMW\",\n  \"model\": \"CMR12004\",\n  \"class\": \"\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "team is missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'team' is missing\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"BMW\",\n  \"model\": \"CMR12004\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "make is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'make' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"\",\n  \"model\": \"CMR12004\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "model is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'model' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"BMW\",\n  \"model\": \"\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "class is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'class' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"BMW\",\n  \"model\": \"CMR12004\",\n  \"class\": \"\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "team is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't add a car if 'team' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"BMW\",\n  \"model\": \"CMR12004\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#INTEGRATION",
							"item": [
								{
									"name": "Add a new car (BMW)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Add a new car successfully\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    pm.expect(pm.response.json().id).to.be.a(\"string\");",
													"    pm.expect(pm.response.json().id).to.have.lengthOf(36);",
													"",
													"    pm.collectionVariables.set(\"car2ID\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"BMW\",\n  \"make\": \"BMW\",\n  \"model\": \"CMR12004\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assert the car (BMW) is added",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can find the added car\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    responseData = pm.response.json();",
													"    pm.expect(responseData.name).to.eql(\"BMW\");",
													"    pm.expect(responseData.make).to.eql(\"BMW\");",
													"    pm.expect(responseData.model).to.eql(\"CMR12004\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/cars/{{car2ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{car2ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[PATCH] /cars/{carID} - Update an existing car",
					"item": [
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Car - make is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit car if 'make' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": 123,\n  \"model\": \"W11\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Car - model is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit car if 'model' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Mercedes\",\n  \"model\": 123,\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Car - class is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit car if 'class' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Mercedes\",\n  \"model\": \"W11\",\n  \"class\": 123,\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Car - team is an integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit car if 'team' is an integer\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Mercedes\",\n  \"model\": \"W11\",\n  \"class\": \"{{classID}}\",\n  \"team\": 123\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Request data",
							"item": [
								{
									"name": "Long string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit a car with long string\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium\",\n  \"model\": \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Empty fields",
							"item": [
								{
									"name": "make is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit a car if 'make' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"\",\n  \"model\": \"W11\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "model is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit a car if 'model' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Mercedes\",\n  \"model\": \"\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "class is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit a car if 'class' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Mercedes\",\n  \"model\": \"W11\",\n  \"class\": \"\",\n  \"team\": \"{{teamID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "team is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Can't edit a car if 'team' is empty\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Mercedes\",\n  \"model\": \"W11\",\n  \"class\": \"{{classID}}\",\n  \"team\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#INTEGRATION",
							"item": [
								{
									"name": "Edit the car (Edit Ferrari -> Mercedes)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Edit a car successfully\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"Mercedes\",\n  \"model\": \"W11\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Assert the car is edited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Assert the car is edited\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    responseData = pm.response.json();",
													"    pm.expect(responseData.make).to.eql(\"Mercedes\");",
													"    pm.expect(responseData.model).to.eql(\"W11\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/cars/{{carID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cars",
												"{{carID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /cars - Get all cars",
					"item": [
						{
							"name": "Get all cars",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"    type: \"object\",",
											"    properties: {",
											"        count: { type: \"number\" },",
											"        data: {",
											"            type: \"array\",",
											"            items: [{",
											"                type: \"object\",",
											"                properties: {",
											"                    id: { type: \"string\" },",
											"                    make: { type: \"string\" },",
											"                    model: { type: \"string\" },",
											"                    class: {",
											"                        type: \"object\",",
											"                        properties: {",
											"                            id: { type: \"string\" },",
											"                            name: { type: \"string\" }",
											"                        }",
											"                    },",
											"                    team: {",
											"                        type: \"object\",",
											"                        properties: {",
											"                            id: { type: \"string\" },",
											"                            name: { type: \"string\" },",
											"                            nationality: { type: \"string\" },",
											"                            businessAddress: {",
											"                                anyOf: [",
											"                                    {",
											"                                        type: \"object\",",
											"                                        properties: {",
											"                                            id: { type: \"string\" },",
											"                                            street: { type: [\"string\", \"null\"] },",
											"                                            street2: { type: [\"string\", \"null\"] },",
											"                                            city: { type: \"string\" },",
											"                                            state: { type: \"string\" },",
											"                                            zipcode: { type: \"string\" },",
											"                                            country: { type: \"string\" }",
											"                                        }",
											"                                    },",
											"                                    {",
											"                                        type: \"null\"",
											"                                    }",
											"                                ]",
											"                            }",
											"                        } ",
											"                    }",
											"                }",
											"            }]",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validate schema\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Get all cars successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] /cars/{carID} - Find car by ID",
					"item": [
						{
							"name": "Find a car by ID (Mercedes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"    type: \"object\",",
											"    items: [{",
											"        type: \"object\",",
											"        properties: {",
											"            id: { type: \"string\" },",
											"            make: { type: \"string\" },",
											"            model: { type: \"string\" },",
											"            class: {",
											"                type: \"object\",",
											"                properties: {",
											"                    id: { type: \"string\" },",
											"                    name: { type: \"string\" }",
											"                }",
											"            },",
											"            team: {",
											"                type: \"object\",",
											"                properties: {",
											"                    id: { type: \"string\" },",
											"                    name: { type: \"string\" },",
											"                    nationality: { type: \"string\" },",
											"                    businessAddress: {",
											"                        anyOf: [",
											"                            {",
											"                                type: \"object\",",
											"                                properties: {",
											"                                    id: { type: \"string\" },",
											"                                    street: { type: [\"string\", \"null\"] },",
											"                                    street2: { type: [\"string\", \"null\"] },",
											"                                    city: { type: \"string\" },",
											"                                    state: { type: \"string\" },",
											"                                    zipcode: { type: \"string\" },",
											"                                    country: { type: \"string\" }",
											"                                }",
											"                            },",
											"                            {",
											"                                type: \"null\"",
											"                            }",
											"                        ]",
											"                    }",
											"                } ",
											"            }",
											"        }",
											"    }]",
											"}",
											"",
											"pm.test(\"Validate schema\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Find a car successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    responseData = pm.response.json();",
											"    pm.expect(responseData.make).to.eql(\"Mercedes\");",
											"    pm.expect(responseData.model).to.eql(\"W11\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/{{carID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										"{{carID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] / cars/{carID}/results",
					"item": [
						{
							"name": "Get all race results of the car (Mercedes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"    type: \"object\",",
											"    properties: {",
											"        count: { type: \"number\" },",
											"        data: {",
											"            type: \"array\",",
											"            items: [{",
											"                type: \"object\",",
											"                properties: {",
											"                    id: { type: \"string\" },",
											"                    raceNumber: { type: \"string\" },",
											"                    startPosition: { type: \"integer\" },",
											"                    finishPosition: { type: \"integer\" },",
											"                    race: {",
											"                        type: \"object\",",
											"                        properties: {",
											"                            id: { type: \"string\" },",
											"                            name: { type: \"string\" }",
											"                        }",
											"                    },",
											"                    car: {",
											"                        type: \"object\",",
											"                        properties: {",
											"                            id: { type: \"string\" },",
											"                            make: { type: \"string\" },",
											"                            model: { type: \"string\" },",
											"                            class: {",
											"                                type: \"object\",",
											"                                properties: {",
											"                                    id: { type: \"string\" },",
											"                                    name: { type: \"string\" }",
											"                                }",
											"                            }",
											"                        }",
											"                    },",
											"                    driver: {",
											"                        type: \"object\",",
											"                        properties: {",
											"                            id: { type: \"string\"},",
											"                            firstName: { type: \"string\"},",
											"                            lastName: { type: \"string\"},",
											"                            nationality: { type: \"string\"},",
											"                            homeAddress: {",
											"                                anyOf: [",
											"                                    {",
											"                                        type: \"object\",",
											"                                        properties: {",
											"                                            id: { type: \"string\" },",
											"                                            street: { type: [\"string\", \"null\"] },",
											"                                            street2: { type: [\"string\", \"null\"] },",
											"                                            city: { type: \"string\" },",
											"                                            state: { type: \"string\" },",
											"                                            zipcode: { type: \"string\" },",
											"                                            country: { type: \"string\" }",
											"                                        }",
											"                                    },",
											"                                    {",
											"                                        type: \"null\"",
											"                                    }",
											"                                ]",
											"                            },",
											"                            managementAddress: { ",
											"                                anyOf: [",
											"                                    {",
											"                                        type: \"object\",",
											"                                        properties: {",
											"                                            id: { type: \"string\" },",
											"                                            street: { type: [\"string\", \"null\"] },",
											"                                            street2: { type: [\"string\", \"null\"] },",
											"                                            city: { type: \"string\" },",
											"                                            state: { type: \"string\" },",
											"                                            zipcode: { type: \"string\" },",
											"                                            country: { type: \"string\" }",
											"                                        }",
											"                                    },",
											"                                    {",
											"                                        type: \"null\"",
											"                                    }",
											"                                ]",
											"                            },",
											"                        }",
											"                    },",
											"                    class: {",
											"                        type: \"object\",",
											"                        properties: {",
											"                            id: { type: \"string\" },",
											"                            name: { type: \"string\" },",
											"                        }",
											"                    }",
											"                }",
											"            }]",
											"        }",
											"    }",
											"}",
											"",
											"pm.test(\"Validate schema\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Get all race results successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/{{carID}}/results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										"{{carID}}",
										"results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[DELETE] /cars/{carID}",
					"item": [
						{
							"name": "Delete car race result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete car race result successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"raceResultId\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/race-results/{{raceResultId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"race-results",
										"{{raceResultId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a car (BMW)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete a car successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"car2ID\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/{{car2ID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										"{{car2ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Data  Cleanup",
					"item": [
						{
							"name": "Delete race",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete race successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"raceID\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/races/{{raceID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races",
										"{{raceID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete car (Mercedes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete team successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"carID\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/{{carID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										"{{carID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete driver successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"driverID\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/drivers/{{driverID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										"{{driverID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete class successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"classID\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/{{classID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										"{{classID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete team successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"teamID\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/teams/{{teamID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										"{{teamID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Race",
			"item": [
				{
					"name": "Data seeding",
					"item": [
						{
							"name": "Create class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Class - Create new API:\";",
											"",
											"pm.test(`${testTitle} Status code is 201`, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{",
											"    const responseText = pm.response.json().id;",
											"    pm.expect(responseText).to.be.a(\"string\");",
											"    pm.expect(responseText.length).to.equal(36);",
											"    pm.collectionVariables.set(\"class1Id\", responseText);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"LM GTE AM\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Address - Create new API:\";",
											"",
											"pm.test(`${testTitle} Status code is 201`, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{",
											"    const responseText = pm.response.json().id;",
											"    pm.expect(responseText).to.be.a(\"string\");",
											"    pm.expect(responseText.length).to.equal(36);",
											"    pm.collectionVariables.set(\"address1Id\", responseText);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Address 1\",\n    \"street\": \"25 Nguyen Dinh Chieu\",\n    \"street2\": \"14 Doan Tran Nghiep\",\n    \"city\": \"Nha Trang\",\n    \"state\": \"Khanh Hoa\",\n    \"zip\": \"65000\",\n    \"country\": \"Viet Nam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addresses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Address - Create new API:\";",
											"",
											"pm.test(`${testTitle} Status code is 201`, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{",
											"    const responseText = pm.response.json().id;",
											"    pm.expect(responseText).to.be.a(\"string\");",
											"    pm.expect(responseText.length).to.equal(36);",
											"    pm.collectionVariables.set(\"address2Id\", responseText);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Address 2\",\n    \"street\": \"5 Pham Van Dong\",\n    \"street2\": \"\",\n    \"city\": \"Nha Trang\",\n    \"state\": \"Khanh Hoa\",\n    \"zip\": \"65000\",\n    \"country\": \"Viet Nam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addresses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address(3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Address - Create new API:\";",
											"",
											"pm.test(`${testTitle} Status code is 201`, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{",
											"    const responseText = pm.response.json().id;",
											"    pm.expect(responseText).to.be.a(\"string\");",
											"    pm.expect(responseText.length).to.equal(36);",
											"    pm.collectionVariables.set(\"address3Id\", responseText);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Address 3\",\n    \"street\": \"\",\n    \"street2\": \"\",\n    \"city\": \"Houston\",\n    \"state\": \"Texas\",\n    \"zip\": \"77073\",\n    \"country\": \"United States\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/addresses",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Team - Create new API:\";\r",
											"\r",
											"pm.test(`${testTitle} Status code is 201`, function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{\r",
											"    const responseText = pm.response.json().id;\r",
											"    pm.expect(responseText).to.be.a(\"string\");\r",
											"    pm.expect(responseText.length).to.equal(36);\r",
											"    pm.collectionVariables.set(\"team1Id\", responseText);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TOYOTA GAZOO RACING\",\n    \"nationality\": \"USA\",\n    \"businessAddress\": \"{{address3Id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Driver - Create new API:\";\r",
											"\r",
											"pm.test(`${testTitle} Status code is 201`, function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{\r",
											"    const responseText = pm.response.json().id;\r",
											"    pm.expect(responseText).to.be.a(\"string\");\r",
											"    pm.expect(responseText.length).to.equal(36);\r",
											"    pm.collectionVariables.set(\"driver1Id\", responseText);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Nguyen\",\n    \"lastName\": \"An\",\n    \"nationality\": \"Viet Nam\",\n    \"homeAddress\": \"{{address1Id}}\",\n    \"teams\": [\n        \"{{team1Id}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create driver(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Driver - Create new API:\";\r",
											"\r",
											"pm.test(`${testTitle} Status code is 201`, function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{\r",
											"    const responseText = pm.response.json().id;\r",
											"    pm.expect(responseText).to.be.a(\"string\");\r",
											"    pm.expect(responseText.length).to.equal(36);\r",
											"    pm.collectionVariables.set(\"driver2Id\", responseText);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Loi\",\n    \"lastName\": \"Tra\",\n    \"nationality\": \"Viet Nam\",\n    \"managementAddress\": \"{{address2Id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create car",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Car - Create new API:\";\r",
											"\r",
											"pm.test(`${testTitle} Status code is 201`, function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{\r",
											"    const responseText = pm.response.json().id;\r",
											"    pm.expect(responseText).to.be.a(\"string\");\r",
											"    pm.expect(responseText.length).to.equal(36);\r",
											"    pm.collectionVariables.set(\"car1Id\", responseText);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ferrari\",\n    \"class\": \"{{class1Id}}\",\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GTE-LM\",\n    \"team\": \"{{team1Id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create car(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Car - Create new API:\";\r",
											"\r",
											"pm.test(`${testTitle} Status code is 201`, function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(`${testTitle} Response must be a string and has a length of 36`,()=>{\r",
											"    const responseText = pm.response.json().id;\r",
											"    pm.expect(responseText).to.be.a(\"string\");\r",
											"    pm.expect(responseText.length).to.equal(36);\r",
											"    pm.collectionVariables.set(\"car2Id\", responseText);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ferrari\",\n    \"class\": \"{{class1Id}}\",\n    \"make\": \"Ferrari\",\n    \"model\": \"488 GT3 Evo 2020\",\n    \"team\": \"{{team1Id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[POST] /races - Create race",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Create race",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 201`, function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response must be a string and length of the string is 36`,()=>{\r",
													"    const responseText = pm.response.json().id\r",
													"    pm.expect(responseText).to.be.a(\"string\")\r",
													"    pm.expect(responseText.length).to.equal(36)\r",
													"    pm.collectionVariables.set(\"race1Id\", responseText);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 488,\n            \"startingPosition\": 5,\n            \"isFinished\": true,\n            \"finishingPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"carNumber\": 512,\n            \"startingPosition\": 1,\n            \"isFinished\": false,\n            \"finishingPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Mising required fields",
							"item": [
								{
									"name": "Create race  - Missing name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"name is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"name\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"raceNumber\": \"LM488\",\n            \"startPosition\": 5,\n            \"finishPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"raceNumber\": \"LM512\",\n            \"startPosition\": 1,\n            \"finishPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race  - Missing race results class",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"class is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].class\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [{\n        \"car\": \"{{car1Id}}\",\n        \"driver\": \"{{driver1Id}}\",\n        \"raceNumber\": \"LM488\",\n        \"startPosition\": 5,\n        \"finishPosition\": 2\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race  - Missing race results car",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"car is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].car\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [{\n        \"class\": \"{{class1Id}}\",\n        \"driver\": \"{{driver1Id}}\",\n        \"raceNumber\": \"LM488\",\n        \"startPosition\": 5,\n        \"finishPosition\": 2\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race  - Missing race results driver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"driver is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].driver\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [{\n        \"class\": \"{{class1Id}}\",\n        \"car\": \"{{car1Id}}\",\n        \"raceNumber\": \"LM488\",\n        \"startPosition\": 5,\n        \"finishPosition\": 2\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race  - Missing race results start position",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"start position is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].startingPosition\\\" is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [{\n        \"class\": \"{{class1Id}}\",\n        \"car\": \"{{car1Id}}\",\n        \"driver\": \"{{driver1Id}}\"\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Create race - Extra address field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"address is not allowed\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"address\\\" is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"address\": \"United States\",\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 488,\n            \"startingPosition\": 5,\n            \"finishingPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"carNumber\": 512,\n            \"startingPosition\": 1,\n            \"finishingPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Create race - Name is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"name is not allowed to be empty\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\",\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 488,\n            \"startingPosition\": 5,\n            \"finishingPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"carNumber\": 512,\n            \"startingPosition\": 1,\n            \"finishingPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race - Race result class is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"class is not allowed to be empty\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].class\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [\n        {\n            \"class\": \"\",\n            \"car\": \"{{car1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 488,\n            \"startingPosition\": 5,\n            \"finishingPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"carNumber\": 512,\n            \"startingPosition\": 1,\n            \"finishingPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race - Race result car is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"car is not allowed to be empty\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].car\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 488,\n            \"startingPosition\": 5,\n            \"finishingPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"carNumber\": 512,\n            \"startingPosition\": 1,\n            \"finishingPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create race - Race result driver is empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"driver is not allowed to be empty\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].driver\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans\",\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car1Id}}\",\n            \"driver\": \"\",\n            \"carNumber\": 488,\n            \"startingPosition\": 5,\n            \"finishingPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"carNumber\": 512,\n            \"startingPosition\": 1,\n            \"finishingPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /races - Get all race",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Get all race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Read list API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an array`,()=>{\r",
													"    pm.expect(jsonRes.count).to.be.a(\"number\")\r",
													"    pm.expect(jsonRes.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonRes.data.length).to.eql(1);\r",
													"    pm.expect(jsonRes.data[0]).to.be.an(\"object\");\r",
													"    pm.expect(jsonRes.data[0]).to.have.all.keys([\"id\", \"name\"]);\r",
													"    pm.expect(jsonRes.data[0].id).to.eql(pm.collectionVariables.get(\"race1Id\"))\r",
													"    pm.expect(jsonRes.data[0].name).to.eql(\"Le Mans\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[PATCH] /races/{raceId} - Update an existing race",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Update an existing race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Update API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 204`, function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans 2021\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) Race id need to be updated"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Mising required fields",
							"item": [
								{
									"name": "Update an existing race - Missing name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Update API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"name is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"name\\\" is required\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) Race id need to be updated"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Extra fields",
							"item": [
								{
									"name": "Update an existing race - Extra race results fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Update API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"race results is not allowed\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"raceResults\\\" is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans 2021\",\n    \"raceResults\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"raceNumber\": \"LM488\",\n            \"startPosition\": 5,\n            \"finishPosition\": 2\n        },\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver2Id}}\",\n            \"raceNumber\": \"LM512\",\n            \"startPosition\": 1,\n            \"finishPosition\": 7\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) Race id need to be updated"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Invalid data types",
							"item": [
								{
									"name": "Update an existing race - Name is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Update API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"name is not allowed to be empty\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) Race id need to be updated"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an existing race - Name is not string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Update API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"name must be a string\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"name\\\" must be a string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) Race id need to be updated"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /races/{raceId} (Find race by ID)",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Find race by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Read detail API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an object`,()=>{\r",
													"    pm.expect(jsonRes).to.be.an(\"object\");\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"id\", \"name\"]);\r",
													"    pm.expect(jsonRes.id).to.eql(pm.collectionVariables.get(\"race1Id\"))\r",
													"    pm.expect(jsonRes.name).to.eql(\"Le Mans 2021\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to return"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[DELETE] /races/{raceId} (Delete a race)",
					"item": [
						{
							"name": "Data seeding",
							"item": [
								{
									"name": "Create race",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 201`, function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response must be a string and length of the string is 36`,()=>{\r",
													"    const responseText = pm.response.json().id;\r",
													"    pm.expect(responseText).to.be.a(\"string\");\r",
													"    pm.expect(responseText.length).to.equal(36);\r",
													"    pm.collectionVariables.set(\"raceDeleteId\", responseText);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Le Mans Delete Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Delete a race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Delete API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 204`, function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{raceDeleteId}}",
													"description": "(Required) Race id to delete"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find race by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Read detail API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 404`, function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json()\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Race must been delete`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(404);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Not Found\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"Not Found\");\r",
													"});\r",
													"pm.collectionVariables.unset(\"raceDeleteId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{raceDeleteId}}",
													"description": "(Required) ID of race to return"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Not exist race",
							"item": [
								{
									"name": "Delete a race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Delete API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 404`, function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is a string`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(404);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Not Found\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"Not Found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/races/:raceId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{driver1Id}}",
													"description": "(Required) Race id to delete"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[GET] /races/{raceId}/results (All race results for that race)",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "All race results for that race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race - Read detail API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 200`, function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"const schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        count: { type: \"number\" },\r",
													"        data: {\r",
													"            type: \"array\",\r",
													"            items: [{\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: { type: \"string\" },\r",
													"                    raceNumber: { type: \"string\" },\r",
													"                    startPosition: { type: \"number\" },\r",
													"                    finishPosition: { type: \"number\" },\r",
													"                    race: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            name: { type: \"string\" }\r",
													"                        }\r",
													"                    },\r",
													"                    class: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            name: { type: \"string\" }\r",
													"                        }\r",
													"                    },\r",
													"                    car: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            make: { type: \"string\" },\r",
													"                            model: { type: \"string\" },\r",
													"                            class: {\r",
													"                                type: \"object\",\r",
													"                                properties: {\r",
													"                                    id: { type: \"string\" },\r",
													"                                    name: { type: \"string\" }\r",
													"                                }\r",
													"                            }\r",
													"                        } \r",
													"                    },\r",
													"                    driver: {\r",
													"                        type: \"object\",\r",
													"                        properties: {\r",
													"                            id: { type: \"string\" },\r",
													"                            firstName: { type: \"string\" },\r",
													"                            lastName: { type: \"string\" },\r",
													"                            nationality: { type: \"string\" },\r",
													"                            homeAddress: {\r",
													"                                anyOf: [\r",
													"                                    {\r",
													"                                        type: \"object\",\r",
													"                                        properties: {\r",
													"                                            id: { type: \"string\" },\r",
													"                                            street: { type: [\"string\", \"null\"] },\r",
													"                                            street2: { type: [\"string\", \"null\"] },\r",
													"                                            city: { type: \"string\" },\r",
													"                                            state: { type: \"string\" },\r",
													"                                            zipcode: { type: \"string\" },\r",
													"                                            country: { type: \"string\" }\r",
													"                                        }\r",
													"                                    },\r",
													"                                    {\r",
													"                                        type: \"null\"\r",
													"                                    }\r",
													"                                ]\r",
													"                            },\r",
													"                            managementAddress: {\r",
													"                                anyOf: [\r",
													"                                    {\r",
													"                                        type: \"object\",\r",
													"                                        properties: {\r",
													"                                            id: { type: \"string\" },\r",
													"                                            street: { type: [\"string\", \"null\"] },\r",
													"                                            street2: { type: [\"string\", \"null\"] },\r",
													"                                            city: { type: \"string\" },\r",
													"                                            state: { type: \"string\" },\r",
													"                                            zipcode: { type: \"string\" },\r",
													"                                            country: { type: \"string\" }\r",
													"                                        }\r",
													"                                    },\r",
													"                                    {\r",
													"                                        type: \"null\"\r",
													"                                    }\r",
													"                                ]\r",
													"                            }\r",
													"                        } \r",
													"                    }\r",
													"                }\r",
													"            }]\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test(`${testTitle} Validate schema`,()=>{\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to return"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[PUT] /races/{raceId}/results (Add race results for that race)",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Add race results for that race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 201`, function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json().ids;\r",
													"\r",
													"pm.test(`${testTitle} Response must be an array string and length of the string is 36`,()=>{\r",
													"    pm.expect(jsonRes).to.be.an(\"array\");\r",
													"    pm.expect(jsonRes.length).to.equal(1);\r",
													"    pm.expect(jsonRes[0]).to.be.a(\"string\");\r",
													"    pm.expect(jsonRes[0].length).to.equal(36);\r",
													"    pm.collectionVariables.set(\"raceResult1Id\", jsonRes[0])\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 166,\n            \"startingPosition\": 1\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Duplicate car, race, driver",
							"item": [
								{
									"name": "Add race results for that race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"duplicate value\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"duplicate key value violates unique constraint \\\"unique_result_index\\\"\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [{\n        \"class\": \"{{class1Id}}\",\n        \"car\": \"{{car2Id}}\",\n        \"driver\": \"{{driver1Id}}\",\n        \"carNumber\": 166,\n        \"startingPosition\": 1\n    }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Mising required fields",
							"item": [
								{
									"name": "Add race results for that race - Missing class",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"class is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].class\\\" is required\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [\n        {\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 166,\n            \"startingPosition\": 1\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add race results for that race - Missing car",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"car is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].car\\\" is required\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 166,\n            \"startingPosition\": 1\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add race results for that race - Missing driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"driver is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].driver\\\" is required\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"carNumber\": 166,\n            \"startingPosition\": 1\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add race results for that race - Missing start position",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"start position is required\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"\\\"results[0].startingPosition\\\" is required\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"results\": [\n        {\n            \"class\": \"{{class1Id}}\",\n            \"car\": \"{{car2Id}}\",\n            \"driver\": \"{{driver1Id}}\",\n            \"carNumber\": 166\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[PATCH] /races/{raceId}/results/{raceResultId} - Update race result",
					"item": [
						{
							"name": "#POSITIVE",
							"item": [
								{
									"name": "Add race results for that race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 204`, function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"class\": \"{{class1Id}}\",\n    \"car\": \"{{car2Id}}\",\n    \"driver\": \"{{driver1Id}}\",\n    \"carNumber\": 166,\n    \"startingPosition\": 1,\n    \"isFinished\": true,\n    \"finishingPosition\": 3\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results/:raceResultId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results",
												":raceResultId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												},
												{
													"key": "raceResultId",
													"value": "{{raceResult1Id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "#NEGATIVE - Duplicate car, race, driver",
							"item": [
								{
									"name": "Add race results for that race",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const testTitle = \"Race Result - Create new API:\";\r",
													"\r",
													"pm.test(`${testTitle} Status code is 400`, function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonRes = pm.response.json();\r",
													"\r",
													"pm.test(`${testTitle} Response must be an error object`, function () {\r",
													"    pm.expect(jsonRes).to.be.an(\"object\")\r",
													"    pm.expect(jsonRes).to.have.all.keys([\"statusCode\", \"error\", \"message\"])\r",
													"});\r",
													"\r",
													"pm.test(`${testTitle} Response message is \"duplicate value\"`, function () {\r",
													"    pm.expect(jsonRes.statusCode).to.eql(400);\r",
													"    pm.expect(jsonRes.error).to.eql(\"Bad Request\");\r",
													"    pm.expect(jsonRes.message).to.eql(\"duplicate key value violates unique constraint \\\"unique_result_index\\\"\")\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"class\": \"{{class1Id}}\",\n    \"car\": \"{{car1Id}}\",\n    \"driver\": \"{{driver1Id}}\",\n    \"carNumber\": 166,\n    \"startingPosition\": 1,\n    \"isFinished\": true,\n    \"finishingPosition\": 3\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/races/:raceId/results/:raceResultId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"races",
												":raceId",
												"results",
												":raceResultId"
											],
											"variable": [
												{
													"key": "raceId",
													"value": "{{race1Id}}",
													"description": "(Required) ID of race to add"
												},
												{
													"key": "raceResultId",
													"value": "{{raceResult1Id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Data cleanup",
					"item": [
						{
							"name": "All race results for that race",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Race - Read detail API:\";\r",
											"\r",
											"pm.test(`${testTitle} Status code is 200`, function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonRes = pm.response.json().data;\r",
											"\r",
											"pm.test(`${testTitle} Set race result ID`,()=>{\r",
											"    pm.expect(jsonRes).to.be.an(\"array\")\r",
											"    for (let i = 0; i < jsonRes.length; i++) {\r",
											"        if (jsonRes[i].hasOwnProperty(\"id\")) {\r",
											"            pm.collectionVariables.set(`raceResult${i}Id`, jsonRes[i].id)\r",
											"        }\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/races/:raceId/results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races",
										":raceId",
										"results"
									],
									"variable": [
										{
											"key": "raceId",
											"value": "{{race1Id}}",
											"description": "(Required) ID of race to return"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a race result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Race Result - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"raceResult0Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/race-results/:raceResultId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"race-results",
										":raceResultId"
									],
									"variable": [
										{
											"key": "raceResultId",
											"value": "{{raceResult0Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a race result(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Race Result - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"raceResult1Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/race-results/:raceResultId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"race-results",
										":raceResultId"
									],
									"variable": [
										{
											"key": "raceResultId",
											"value": "{{raceResult1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a race result(3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Race Result - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"raceResult2Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/race-results/:raceResultId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"race-results",
										":raceResultId"
									],
									"variable": [
										{
											"key": "raceResultId",
											"value": "{{raceResult2Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a race",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Race - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"race1Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/races/:raceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races",
										":raceId"
									],
									"variable": [
										{
											"key": "raceId",
											"value": "{{race1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a car(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Car - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"car2Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/:carId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":carId"
									],
									"variable": [
										{
											"key": "carId",
											"value": "{{car2Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a car",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Car - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"car1Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/:carId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										":carId"
									],
									"variable": [
										{
											"key": "carId",
											"value": "{{car1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Team - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"team1Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/teams/:teamId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										":teamId"
									],
									"variable": [
										{
											"key": "teamId",
											"value": "{{team1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Driver - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"driver1Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/drivers/:driverId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":driverId"
									],
									"variable": [
										{
											"key": "driverId",
											"value": "{{driver1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a driver(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Driver - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"driver2Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/drivers/:driverId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										":driverId"
									],
									"variable": [
										{
											"key": "driverId",
											"value": "{{driver2Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Address - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"address1Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/addresses/:addressId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{address1Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an address(2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Address - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"address2Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/addresses/:addressId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{address2Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an address(3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Address - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"address3Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/addresses/:addressId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{address3Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const testTitle = \"Class - Delete API:\";",
											"",
											"pm.test(`${testTitle} Status code is 204`, function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.collectionVariables.unset(\"class1Id\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/:classId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										":classId"
									],
									"variable": [
										{
											"key": "classId",
											"value": "{{class1Id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Race Result",
			"item": [
				{
					"name": "Data seeding",
					"item": [
						{
							"name": "Add a driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add driver successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"driverId\", pm.response.json().id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Nguyen\",\n  \"lastName\": \"An\",\n  \"nationality\": \"Viet Nam\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/drivers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add class successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"classId\", pm.response.json().id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"LM GTE AM\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/classes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add driver successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"teamId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ferrari racing team\",\n  \"nationality\": \"USA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new car (Ferrari)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add driver successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.expect(pm.response.json().id).to.be.a(\"string\");",
											"    pm.expect(pm.response.json().id).to.have.lengthOf(36);",
											"",
											"    pm.collectionVariables.set(\"carId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ferrari\",\n  \"make\": \"Ferrari\",\n  \"model\": \"488 GTE-LM\",\n  \"class\": \"{{classId}}\",\n  \"team\": \"{{teamId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new race",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add a race successfully\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.collectionVariables.set(\"raceId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Le Mans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/races",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new race result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add a new race result\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    responseData = pm.response.json().ids;",
											"",
											"    pm.expect(responseData[0]).to.be.a(\"string\");",
											"    pm.expect(responseData[0]).to.have.lengthOf(36);",
											"",
											"    pm.collectionVariables.set(\"raceResultId\", responseData[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"results\": [\n    {\n        \"car\": \"{{carId}}\",\n        \"driver\": \"{{driverId}}\",\n        \"class\": \"{{classId}}\",\n        \"carNumber\": 200,\n        \"startingPosition\": 2,\n        \"isFinished\": true,\n        \"finishingPosition\": 3\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/races/{{raceId}}/results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races",
										"{{raceId}}",
										"results"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[GET] /race-results/{id} -  Get a result detail by ID",
					"item": [
						{
							"name": "#INTEGRATION",
							"item": [
								{
									"name": "Update an existing race result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Update race result succesfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Valid schema\", ()=>{",
													"    pm.response.to.have.jsonSchema({",
													"        type: \"object\",",
													"        properties: {",
													"            id: { type: \"string\" },",
													"            raceNumber: { type: \"string\" },",
													"            startPosition: { type: \"number\" },",
													"            finishPosition: { type: \"number\" },",
													"            race: {",
													"                type: \"object\",",
													"                properties: {",
													"                    id: { type: \"string\" },",
													"                    name: { type: \"string\" }",
													"                }",
													"            },",
													"            class: {",
													"                type: \"object\",",
													"                properties: {",
													"                    id: { type: \"string\" },",
													"                    name: { type: \"string\" }",
													"                }",
													"            },",
													"            car: {",
													"                type: \"object\",",
													"                properties: {",
													"                    id: { type: \"string\" },",
													"                    make: { type: \"string\" },",
													"                    model: { type: \"string\" },",
													"                    class: {",
													"                        type: \"object\",",
													"                        properties: {",
													"                            id: { type: \"string\" },",
													"                            name: { type: \"string\" }",
													"                        }",
													"                    }",
													"                } ",
													"            },",
													"            driver: {",
													"                type: \"object\",",
													"                properties: {",
													"                    id: { type: \"string\" },",
													"                    firstName: { type: \"string\" },",
													"                    lastName: { type: \"string\" },",
													"                    nationality: { type: \"string\" },",
													"                    homeAddress: {",
													"                        anyOf: [",
													"                            {",
													"                                type: \"object\",",
													"                                properties: {",
													"                                    id: { type: \"string\" },",
													"                                    street: { type: [\"string\", \"null\"] },",
													"                                    street2: { type: [\"string\", \"null\"] },",
													"                                    city: { type: \"string\" },",
													"                                    state: { type: \"string\" },",
													"                                    zipcode: { type: \"string\" },",
													"                                    country: { type: \"string\" }",
													"                                }",
													"                            },",
													"                            {",
													"                                type: \"null\"",
													"                            }",
													"                        ]",
													"                    },",
													"                    managementAddress: {",
													"                        anyOf: [",
													"                            {",
													"                                type: \"object\",",
													"                                properties: {",
													"                                    id: { type: \"string\" },",
													"                                    street: { type: [\"string\", \"null\"] },",
													"                                    street2: { type: [\"string\", \"null\"] },",
													"                                    city: { type: \"string\" },",
													"                                    state: { type: \"string\" },",
													"                                    zipcode: { type: \"string\" },",
													"                                    country: { type: \"string\" }",
													"                                }",
													"                            },",
													"                            {",
													"                                type: \"null\"",
													"                            }",
													"                        ]",
													"                    }",
													"                } ",
													"            }",
													"        }",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"car\": \"{{carId}}\",\n    \"class\": \"{{classId}}\",\n    \"driver\": \"{{driverId}}\",\n    \"raceNumber\": \"201\",\n    \"startPosition\": 3,\n    \"finishPosition\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/race-results/{{raceResultId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"race-results",
												"{{raceResultId}}"
											]
										}
									},
									"response": [
										{
											"name": "No Content. Successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/race-results/:raceResultId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"race-results",
														":raceResultId"
													],
													"variable": [
														{
															"key": "raceResultId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Race result id need to be updated"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request. Invalid input",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/race-results/:raceResultId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"race-results",
														":raceResultId"
													],
													"variable": [
														{
															"key": "raceResultId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Race result id need to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 400,\n \"error\": \"Bad Request\",\n \"message\": \"Invalid request input\"\n}"
										},
										{
											"name": "Not Found. URL or item not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/race-results/:raceResultId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"race-results",
														":raceResultId"
													],
													"variable": [
														{
															"key": "raceResultId",
															"value": "40e6215d-b5c6-4896-987c-f30f3678f608",
															"description": "(Required) Race result id need to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": 404,\n \"error\": \"Not Found\",\n \"message\": \"Not Found\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "[DELETE] /race-results/{raceResultId} - Delete a race result",
					"item": [
						{
							"name": "#INTEGRATION",
							"item": [
								{
									"name": "Delete a race result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete a race result successfully\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.collectionVariables.unset(\"raceResultId\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/race-results/{{raceResultId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"race-results",
												"{{raceResultId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Data Cleanup",
					"item": [
						{
							"name": "Delete race",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete race successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"raceId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/races/{{raceId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"races",
										"{{raceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete car",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete team successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"carId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cars/{{carId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cars",
										"{{carId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete driver successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"driverId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/drivers/{{driverId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers",
										"{{driverId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete class successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"classId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/classes/{{classId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classes",
										"{{classId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Delete team successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.collectionVariables.unset(\"teamId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/teams/{{teamId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										"{{teamId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set('loadUtils', function loadUtils() {",
					"    let utils = {};",
					"",
					"    const assertStatusCode = (testCaseDesc, statusCode) => {",
					"        pm.test(`${testCaseDesc} Should return status code ${statusCode}`, function () {",
					"            pm.response.to.have.status(statusCode);",
					"        })",
					"    }",
					"",
					"    utils.assertCreatePositive = function (testCaseDesc, callback=()=>{}) {",
					"        const prefix = `CREATE ${testCaseDesc} - #POSITIVE : `",
					"",
					"        assertStatusCode(prefix, 201)",
					"",
					"        pm.test(prefix + \"Should return an ID\", callback)",
					"    }",
					"",
					"    utils.assertNegative = (testCaseDesc, callback=()=>{}) => {",
					"        const prefix = `${testCaseDesc} - #NEGATIVE : `",
					"",
					"        assertStatusCode(prefix, 400)",
					"",
					"        pm.test(prefix + 'Should return \"Bad Request\" error', function () {",
					"            const jsonData = pm.response.json()",
					"            pm.expect(jsonData.statusCode).to.eql(400);    ",
					"            pm.expect(jsonData.error).to.eql(\"Bad Request\");",
					"            callback(jsonData)",
					"        });",
					"    }",
					"",
					"    utils.assertNotFound = (testCaseDesc, callback=()=>{}) => {",
					"        const prefix = `${testCaseDesc} - #NEGATIVE : `",
					"",
					"        assertStatusCode(prefix, 404)",
					"",
					"        pm.test(prefix + 'Should return \"Not Found\" error', function () {",
					"            const jsonData = pm.response.json()",
					"            pm.expect(jsonData.statusCode).to.eql(404);    ",
					"            pm.expect(jsonData.error).to.eql(\"Not Found\");",
					"            pm.expect(jsonData.message).to.eql(\"Not Found\");",
					"            callback(jsonData)",
					"        });",
					"    }",
					"",
					"    utils.assertUpdateDeletePositive = (testCaseDesc, callback=()=>{}) => {",
					"        const prefix = `${testCaseDesc} - #POSITIVE : `",
					"",
					"        assertStatusCode(prefix, 204)",
					"",
					"        callback()",
					"        // pm.test(prefix + 'Should be no response body returned', function () {",
					"        //     // TODO: expect no response body returned",
					"        // });",
					"    }",
					"",
					"    return utils;",
					"} + '; loadUtils();');",
					"// tests['Utils initialized'] = true;",
					"",
					"// Utilities = {};",
					"// Utilities.assertCreatePositive = (testCaseDesc, callback=()=>{}) => {",
					"//     const prefix = `${testCaseDesc} #POSITIVE : `",
					"//     pm.test(prefix + \"Should return status code 201\", function () {",
					"//         pm.response.to.have.status(201);",
					"//     });",
					"",
					"//     pm.test(prefix + \"Should return an ID\", callback)",
					"// }"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Response time is less than 20000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(20000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api"
		},
		{
			"key": "class1Name",
			"value": "Hatch back"
		},
		{
			"key": "class1updateName",
			"value": "Hatch-back"
		},
		{
			"key": "street1Name1",
			"value": "1797 Colonial Drive"
		},
		{
			"key": "street1Name2",
			"value": "411 Patterson Street"
		},
		{
			"key": "city1",
			"value": "Houston"
		},
		{
			"key": "state1",
			"value": "Texas"
		},
		{
			"key": "zipcode1",
			"value": "77002"
		},
		{
			"key": "country1",
			"value": "United States"
		},
		{
			"key": "street2Name1",
			"value": "1741 Tree Top Lane"
		},
		{
			"key": "street2Name2",
			"value": ""
		},
		{
			"key": "city2",
			"value": "King Of Prussia"
		},
		{
			"key": "state2",
			"value": "Pennsylvania"
		},
		{
			"key": "zipcode2",
			"value": "19406"
		},
		{
			"key": "country2",
			"value": "United States"
		},
		{
			"key": "street1UpdateName1",
			"value": "4406 Vernon Street"
		},
		{
			"key": "street1UpdateName2",
			"value": "4480 Ingram Road"
		},
		{
			"key": "cityUpdate1",
			"value": "San Diego"
		},
		{
			"key": "stateUpdate1",
			"value": "California"
		},
		{
			"key": "zipcodeUpdate1",
			"value": "92121"
		},
		{
			"key": "countryUpdate1",
			"value": "United States"
		},
		{
			"key": "firstNameDriver1",
			"value": "Amanda"
		},
		{
			"key": "lastNameDriver1",
			"value": "H Bertram"
		},
		{
			"key": "nationalityDriver1",
			"value": "USA"
		},
		{
			"key": "firstNameUpdateDriver1",
			"value": "Kenton"
		},
		{
			"key": "lastNameUpdateDriver1",
			"value": "F Vargas"
		},
		{
			"key": "nationalityUpdateDriver1",
			"value": "Viet Nam"
		},
		{
			"key": "nameTeam1",
			"value": "7 TOYOTA GAZOO RACING"
		},
		{
			"key": "nationalityTeam1",
			"value": "USA"
		},
		{
			"key": "street3Name1",
			"value": "2579 Gerald L. Bates Drive"
		},
		{
			"key": "street3Name2",
			"value": "764 Science Center Drive"
		},
		{
			"key": "city3",
			"value": "Cambridge"
		},
		{
			"key": "state3",
			"value": "Massachusetts"
		},
		{
			"key": "zipcode3",
			"value": "02138"
		},
		{
			"key": "street4Name1",
			"value": "2720 McKinley Avenue"
		},
		{
			"key": "street4Name2",
			"value": "2062 Poe Road"
		},
		{
			"key": "city4",
			"value": "Centennial"
		},
		{
			"key": "state4",
			"value": "Colorado"
		},
		{
			"key": "zipcode4",
			"value": "80111"
		},
		{
			"key": "firstNameDriver2",
			"value": "Larry"
		},
		{
			"key": "lastNameDriver2",
			"value": "G Brumit"
		},
		{
			"key": "nationalityDriver2",
			"value": "USA"
		},
		{
			"key": "street5Name1",
			"value": "1131 Stratford Park"
		},
		{
			"key": "street5Name2",
			"value": "1428 Jones Street"
		},
		{
			"key": "city5",
			"value": "Parsippany"
		},
		{
			"key": "state5",
			"value": "New Jersey"
		},
		{
			"key": "zipcode5",
			"value": "07054"
		},
		{
			"key": "street6Name1",
			"value": "3682 Desert Broom Court"
		},
		{
			"key": "street6Name2",
			"value": "4532 Barrington Court"
		},
		{
			"key": "city6",
			"value": "Houston"
		},
		{
			"key": "state6",
			"value": "Texas"
		},
		{
			"key": "zipcode6",
			"value": "77070"
		},
		{
			"key": "firstNameDriver3",
			"value": "Connie"
		},
		{
			"key": "lastNameDriver3",
			"value": "R Mattox"
		},
		{
			"key": "nationalityDriver3",
			"value": "Viet Nam"
		},
		{
			"key": "street7Name1",
			"value": "1087 Hornor Avenue"
		},
		{
			"key": "street7Name2",
			"value": "3414 Rhode Island Avenue"
		},
		{
			"key": "city7",
			"value": "Bartlesville"
		},
		{
			"key": "state7",
			"value": "Oklahoma"
		},
		{
			"key": "zipcode7",
			"value": "74003"
		},
		{
			"key": "makeCar",
			"value": "Ferrari"
		},
		{
			"key": "modelCar",
			"value": "488 GTE-LM"
		},
		{
			"key": "makeUpdateCar",
			"value": "Ferrari"
		},
		{
			"key": "modelUpdateCar",
			"value": "488 GT3 Evo 2020"
		},
		{
			"key": "nameRace",
			"value": "FIA GT1 World Championship"
		},
		{
			"key": "raceNumber1",
			"value": "FE488"
		},
		{
			"key": "startPosition1",
			"value": "3"
		},
		{
			"key": "finishPosition1",
			"value": "1"
		},
		{
			"key": "nameUpdateRace",
			"value": "FIA GT1 World Championship 2021"
		},
		{
			"key": "street8Name1",
			"value": "3761 Worthington Drive"
		},
		{
			"key": "street8Name2",
			"value": "3126 Delaware Avenue"
		},
		{
			"key": "city8",
			"value": "LAKE MILLS"
		},
		{
			"key": "state8",
			"value": "Wisconsin"
		},
		{
			"key": "zipcode8",
			"value": "53551"
		},
		{
			"key": "nameTeam2",
			"value": "Volkswagen Polo R WRC"
		},
		{
			"key": "nationalityTeam2",
			"value": "USA"
		},
		{
			"key": "make2Car",
			"value": "Volkswagen Polo"
		},
		{
			"key": "model2Car",
			"value": "Mk6 Polo GTi R5"
		},
		{
			"key": "raceNumber2",
			"value": "VP6R5"
		},
		{
			"key": "startPosition2",
			"value": "5"
		},
		{
			"key": "finishPosition2",
			"value": "2"
		},
		{
			"key": "raceUpdateNumber1",
			"value": "FE-488"
		},
		{
			"key": "addressName1",
			"value": "Address Name 1"
		},
		{
			"key": "addressName2",
			"value": "Address Name 2"
		},
		{
			"key": "addressNameUpdate1",
			"value": "Address Name Update 1"
		},
		{
			"key": "addressNameUpdate2",
			"value": "Address Name Update 2"
		}
	]
}